# Generated from SimpleC.g4 by ANTLR 4.5.3
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3o")
        buf.write("\u0472\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\3\2\3\2\3\2\6\2\u00a6\n\2\r")
        buf.write("\2\16\2\u00a7\3\2\3\2\3\2\3\2\5\2\u00ae\n\2\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\5\3\u00c1\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3")
        buf.write("\u00cb\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\7\3\u00d8\n\3\f\3\16\3\u00db\13\3\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\7\4\u00e3\n\4\f\4\16\4\u00e6\13\4\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\5\5\u00fe\n\5\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u010e\n\7\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u011c\n")
        buf.write("\b\f\b\16\b\u011f\13\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\7\t\u012a\n\t\f\t\16\t\u012d\13\t\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\7\n\u0138\n\n\f\n\16\n\u013b\13\n")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\7\13\u014c\n\13\f\13\16\13\u014f")
        buf.write("\13\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u015a\n")
        buf.write("\f\f\f\16\f\u015d\13\f\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u0165")
        buf.write("\n\r\f\r\16\r\u0168\13\r\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\7\16\u0170\n\16\f\16\16\16\u0173\13\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\7\17\u017b\n\17\f\17\16\17\u017e\13\17")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u0186\n\20\f\20\16")
        buf.write("\20\u0189\13\20\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u0191")
        buf.write("\n\21\f\21\16\21\u0194\13\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u019c\n\22\3\23\3\23\3\23\3\23\3\23\5\23\u01a3")
        buf.write("\n\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u01ad")
        buf.write("\n\25\f\25\16\25\u01b0\13\25\3\26\3\26\3\27\3\27\5\27")
        buf.write("\u01b6\n\27\3\27\3\27\3\27\5\27\u01bb\n\27\3\30\6\30\u01be")
        buf.write("\n\30\r\30\16\30\u01bf\3\31\6\31\u01c3\n\31\r\31\16\31")
        buf.write("\u01c4\3\32\3\32\3\32\3\32\5\32\u01cb\n\32\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\7\33\u01d3\n\33\f\33\16\33\u01d6\13")
        buf.write("\33\3\34\3\34\3\34\3\34\3\34\5\34\u01dd\n\34\3\35\3\35")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u01ee\n\36\3\37\3\37\5\37\u01f2\n\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u01fb\n\37\3 \3")
        buf.write(" \3!\3!\3!\3!\3!\7!\u0204\n!\f!\16!\u0207\13!\3\"\3\"")
        buf.write("\5\"\u020b\n\"\3\"\3\"\3\"\5\"\u0210\n\"\3#\3#\5#\u0214")
        buf.write("\n#\3#\3#\5#\u0218\n#\5#\u021a\n#\3$\3$\3$\3$\3$\3$\7")
        buf.write("$\u0222\n$\f$\16$\u0225\13$\3%\3%\5%\u0229\n%\3%\3%\5")
        buf.write("%\u022d\n%\3&\3&\5&\u0231\n&\3&\3&\3&\3&\3&\3&\5&\u0239")
        buf.write("\n&\3&\3&\3&\3&\3&\3&\3&\5&\u0242\n&\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\7\'\u024a\n\'\f\'\16\'\u024d\13\'\3(\3(\3(\3(\3")
        buf.write("(\5(\u0254\n(\3)\3)\3*\3*\3*\3*\3*\3+\3+\3,\3,\3,\3,\3")
        buf.write(",\3,\5,\u0265\n,\3-\5-\u0268\n-\3-\3-\7-\u026c\n-\f-\16")
        buf.write("-\u026f\13-\3.\3.\3.\3.\3.\3.\5.\u0277\n.\3.\3.\3.\5.")
        buf.write("\u027c\n.\3.\5.\u027f\n.\3.\3.\3.\3.\3.\5.\u0286\n.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0295\n.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\5.\u02a1\n.\3.\7.\u02a4\n.\f")
        buf.write(".\16.\u02a7\13.\3/\3/\3/\6/\u02ac\n/\r/\16/\u02ad\3/\3")
        buf.write("/\5/\u02b2\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\61")
        buf.write("\3\61\3\61\7\61\u02be\n\61\f\61\16\61\u02c1\13\61\3\61")
        buf.write("\5\61\u02c4\n\61\3\62\3\62\3\62\5\62\u02c9\n\62\3\62\5")
        buf.write("\62\u02cc\n\62\3\62\5\62\u02cf\n\62\3\63\3\63\3\63\3\63")
        buf.write("\3\63\7\63\u02d6\n\63\f\63\16\63\u02d9\13\63\3\64\3\64")
        buf.write("\5\64\u02dd\n\64\3\64\3\64\5\64\u02e1\n\64\3\64\3\64\3")
        buf.write("\64\5\64\u02e6\n\64\3\64\3\64\5\64\u02ea\n\64\3\64\5\64")
        buf.write("\u02ed\n\64\3\65\3\65\3\65\3\65\3\65\7\65\u02f4\n\65\f")
        buf.write("\65\16\65\u02f7\13\65\3\66\3\66\3\66\3\66\3\66\5\66\u02fe")
        buf.write("\n\66\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u0306\n\67\f")
        buf.write("\67\16\67\u0309\13\67\38\38\38\38\38\58\u0310\n8\58\u0312")
        buf.write("\n8\39\39\39\39\39\39\79\u031a\n9\f9\169\u031d\139\3:")
        buf.write("\3:\5:\u0321\n:\3;\3;\5;\u0325\n;\3;\3;\7;\u0329\n;\f")
        buf.write(";\16;\u032c\13;\5;\u032e\n;\3<\3<\3<\3<\3<\7<\u0335\n")
        buf.write("<\f<\16<\u0338\13<\3<\3<\5<\u033c\n<\3<\5<\u033f\n<\3")
        buf.write("<\3<\3<\3<\5<\u0345\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\5<\u0355\n<\3<\3<\7<\u0359\n<\f<\16<\u035c")
        buf.write("\13<\5<\u035e\n<\3<\3<\3<\5<\u0363\n<\3<\5<\u0366\n<\3")
        buf.write("<\3<\3<\3<\3<\5<\u036d\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\5<\u0380\n<\3<\3<\7<\u0384\n<\f")
        buf.write("<\16<\u0387\13<\7<\u0389\n<\f<\16<\u038c\13<\3=\3=\3>")
        buf.write("\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u039a\n>\3?\3?\5?\u039e")
        buf.write("\n?\3?\3?\3?\3?\3?\5?\u03a5\n?\3?\7?\u03a8\n?\f?\16?\u03ab")
        buf.write("\13?\3@\3@\3@\3A\3A\3A\3A\3A\7A\u03b5\nA\fA\16A\u03b8")
        buf.write("\13A\3B\3B\3B\3B\3B\3B\5B\u03c0\nB\3C\3C\3C\3C\3C\6C\u03c7")
        buf.write("\nC\rC\16C\u03c8\3C\3C\3C\3D\3D\3D\3D\3D\3D\5D\u03d4\n")
        buf.write("D\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u03e1\nE\3F\3F\5")
        buf.write("F\u03e5\nF\3F\3F\3G\3G\3G\3G\3G\7G\u03ee\nG\fG\16G\u03f1")
        buf.write("\13G\3H\3H\5H\u03f5\nH\3I\5I\u03f8\nI\3I\3I\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\5J\u0403\nJ\3J\3J\3J\3J\3J\3J\5J\u040b\nJ\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u041e")
        buf.write("\nK\3K\3K\5K\u0422\nK\3K\3K\5K\u0426\nK\3K\3K\3K\3K\3")
        buf.write("K\3K\5K\u042e\nK\3K\3K\5K\u0432\nK\3K\3K\3K\5K\u0437\n")
        buf.write("K\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0442\nL\3L\3L\3L\3L\3")
        buf.write("L\5L\u0449\nL\3M\5M\u044c\nM\3M\3M\3N\3N\3N\3N\3N\7N\u0455")
        buf.write("\nN\fN\16N\u0458\13N\3O\3O\3O\5O\u045d\nO\3P\5P\u0460")
        buf.write("\nP\3P\3P\5P\u0464\nP\3P\3P\3Q\3Q\3Q\3Q\3Q\7Q\u046d\n")
        buf.write("Q\fQ\16Q\u0470\13Q\3Q\2\35\4\6\16\20\22\24\26\30\32\34")
        buf.write("\36 (\64@FLZhlpv|\u0080\u008c\u009a\u00a0R\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\2\n\7\2AACCEEHHMN\3\2S]\7\2\t")
        buf.write("\t\24\24\34\34\"\"%%\4\2##&&\6\2\r\r\35\35))--\5\2\4\5")
        buf.write("\31\31\62\62\4\2\65\66RR\3\2\65\66\u04db\2\u00ad\3\2\2")
        buf.write("\2\4\u00c0\3\2\2\2\6\u00dc\3\2\2\2\b\u00fd\3\2\2\2\n\u00ff")
        buf.write("\3\2\2\2\f\u010d\3\2\2\2\16\u010f\3\2\2\2\20\u0120\3\2")
        buf.write("\2\2\22\u012e\3\2\2\2\24\u013c\3\2\2\2\26\u0150\3\2\2")
        buf.write("\2\30\u015e\3\2\2\2\32\u0169\3\2\2\2\34\u0174\3\2\2\2")
        buf.write("\36\u017f\3\2\2\2 \u018a\3\2\2\2\"\u0195\3\2\2\2$\u01a2")
        buf.write("\3\2\2\2&\u01a4\3\2\2\2(\u01a6\3\2\2\2*\u01b1\3\2\2\2")
        buf.write(",\u01ba\3\2\2\2.\u01bd\3\2\2\2\60\u01c2\3\2\2\2\62\u01ca")
        buf.write("\3\2\2\2\64\u01cc\3\2\2\2\66\u01dc\3\2\2\28\u01de\3\2")
        buf.write("\2\2:\u01ed\3\2\2\2<\u01fa\3\2\2\2>\u01fc\3\2\2\2@\u01fe")
        buf.write("\3\2\2\2B\u020f\3\2\2\2D\u0219\3\2\2\2F\u021b\3\2\2\2")
        buf.write("H\u022c\3\2\2\2J\u0241\3\2\2\2L\u0243\3\2\2\2N\u0253\3")
        buf.write("\2\2\2P\u0255\3\2\2\2R\u0257\3\2\2\2T\u025c\3\2\2\2V\u0264")
        buf.write("\3\2\2\2X\u0267\3\2\2\2Z\u0276\3\2\2\2\\\u02b1\3\2\2\2")
        buf.write("^\u02b3\3\2\2\2`\u02c3\3\2\2\2b\u02ce\3\2\2\2d\u02d7\3")
        buf.write("\2\2\2f\u02ec\3\2\2\2h\u02ee\3\2\2\2j\u02fd\3\2\2\2l\u02ff")
        buf.write("\3\2\2\2n\u0311\3\2\2\2p\u0313\3\2\2\2r\u031e\3\2\2\2")
        buf.write("t\u032d\3\2\2\2v\u035d\3\2\2\2x\u038d\3\2\2\2z\u0399\3")
        buf.write("\2\2\2|\u039b\3\2\2\2~\u03ac\3\2\2\2\u0080\u03af\3\2\2")
        buf.write("\2\u0082\u03bf\3\2\2\2\u0084\u03c1\3\2\2\2\u0086\u03d3")
        buf.write("\3\2\2\2\u0088\u03e0\3\2\2\2\u008a\u03e2\3\2\2\2\u008c")
        buf.write("\u03e8\3\2\2\2\u008e\u03f4\3\2\2\2\u0090\u03f7\3\2\2\2")
        buf.write("\u0092\u040a\3\2\2\2\u0094\u0436\3\2\2\2\u0096\u0448\3")
        buf.write("\2\2\2\u0098\u044b\3\2\2\2\u009a\u044f\3\2\2\2\u009c\u045c")
        buf.write("\3\2\2\2\u009e\u045f\3\2\2\2\u00a0\u0467\3\2\2\2\u00a2")
        buf.write("\u00ae\7c\2\2\u00a3\u00ae\7d\2\2\u00a4\u00a6\7e\2\2\u00a5")
        buf.write("\u00a4\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a5\3\2\2\2")
        buf.write("\u00a7\u00a8\3\2\2\2\u00a8\u00ae\3\2\2\2\u00a9\u00aa\7")
        buf.write("\65\2\2\u00aa\u00ab\5(\25\2\u00ab\u00ac\7\66\2\2\u00ac")
        buf.write("\u00ae\3\2\2\2\u00ad\u00a2\3\2\2\2\u00ad\u00a3\3\2\2\2")
        buf.write("\u00ad\u00a5\3\2\2\2\u00ad\u00a9\3\2\2\2\u00ae\3\3\2\2")
        buf.write("\2\u00af\u00b0\b\3\1\2\u00b0\u00c1\5\2\2\2\u00b1\u00b2")
        buf.write("\7\65\2\2\u00b2\u00b3\5r:\2\u00b3\u00b4\7\66\2\2\u00b4")
        buf.write("\u00b5\79\2\2\u00b5\u00b6\5|?\2\u00b6\u00b7\7:\2\2\u00b7")
        buf.write("\u00c1\3\2\2\2\u00b8\u00b9\7\65\2\2\u00b9\u00ba\5r:\2")
        buf.write("\u00ba\u00bb\7\66\2\2\u00bb\u00bc\79\2\2\u00bc\u00bd\5")
        buf.write("|?\2\u00bd\u00be\7R\2\2\u00be\u00bf\7:\2\2\u00bf\u00c1")
        buf.write("\3\2\2\2\u00c0\u00af\3\2\2\2\u00c0\u00b1\3\2\2\2\u00c0")
        buf.write("\u00b8\3\2\2\2\u00c1\u00d9\3\2\2\2\u00c2\u00c3\f\n\2\2")
        buf.write("\u00c3\u00c4\7\67\2\2\u00c4\u00c5\5(\25\2\u00c5\u00c6")
        buf.write("\78\2\2\u00c6\u00d8\3\2\2\2\u00c7\u00c8\f\t\2\2\u00c8")
        buf.write("\u00ca\7\65\2\2\u00c9\u00cb\5\6\4\2\u00ca\u00c9\3\2\2")
        buf.write("\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00d8")
        buf.write("\7\66\2\2\u00cd\u00ce\f\b\2\2\u00ce\u00cf\7a\2\2\u00cf")
        buf.write("\u00d8\7c\2\2\u00d0\u00d1\f\7\2\2\u00d1\u00d2\7`\2\2\u00d2")
        buf.write("\u00d8\7c\2\2\u00d3\u00d4\f\6\2\2\u00d4\u00d8\7B\2\2\u00d5")
        buf.write("\u00d6\f\5\2\2\u00d6\u00d8\7D\2\2\u00d7\u00c2\3\2\2\2")
        buf.write("\u00d7\u00c7\3\2\2\2\u00d7\u00cd\3\2\2\2\u00d7\u00d0\3")
        buf.write("\2\2\2\u00d7\u00d3\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d8\u00db")
        buf.write("\3\2\2\2\u00d9\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2\u00da")
        buf.write("\5\3\2\2\2\u00db\u00d9\3\2\2\2\u00dc\u00dd\b\4\1\2\u00dd")
        buf.write("\u00de\5$\23\2\u00de\u00e4\3\2\2\2\u00df\u00e0\f\3\2\2")
        buf.write("\u00e0\u00e1\7R\2\2\u00e1\u00e3\5$\23\2\u00e2\u00df\3")
        buf.write("\2\2\2\u00e3\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5")
        buf.write("\3\2\2\2\u00e5\7\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e7\u00fe")
        buf.write("\5\4\3\2\u00e8\u00e9\7B\2\2\u00e9\u00fe\5\b\5\2\u00ea")
        buf.write("\u00eb\7D\2\2\u00eb\u00fe\5\b\5\2\u00ec\u00ed\5\n\6\2")
        buf.write("\u00ed\u00ee\5\f\7\2\u00ee\u00fe\3\2\2\2\u00ef\u00f0\7")
        buf.write("!\2\2\u00f0\u00fe\5\b\5\2\u00f1\u00f2\7!\2\2\u00f2\u00f3")
        buf.write("\7\65\2\2\u00f3\u00f4\5r:\2\u00f4\u00f5\7\66\2\2\u00f5")
        buf.write("\u00fe\3\2\2\2\u00f6\u00f7\7,\2\2\u00f7\u00f8\7\65\2\2")
        buf.write("\u00f8\u00f9\5r:\2\u00f9\u00fa\7\66\2\2\u00fa\u00fe\3")
        buf.write("\2\2\2\u00fb\u00fc\7J\2\2\u00fc\u00fe\7c\2\2\u00fd\u00e7")
        buf.write("\3\2\2\2\u00fd\u00e8\3\2\2\2\u00fd\u00ea\3\2\2\2\u00fd")
        buf.write("\u00ec\3\2\2\2\u00fd\u00ef\3\2\2\2\u00fd\u00f1\3\2\2\2")
        buf.write("\u00fd\u00f6\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe\t\3\2\2")
        buf.write("\2\u00ff\u0100\t\2\2\2\u0100\13\3\2\2\2\u0101\u010e\5")
        buf.write("\b\5\2\u0102\u0103\7\65\2\2\u0103\u0104\5r:\2\u0104\u0105")
        buf.write("\7\66\2\2\u0105\u0106\5\f\7\2\u0106\u010e\3\2\2\2\u0107")
        buf.write("\u0108\7\3\2\2\u0108\u0109\7\65\2\2\u0109\u010a\5r:\2")
        buf.write("\u010a\u010b\7\66\2\2\u010b\u010c\5\f\7\2\u010c\u010e")
        buf.write("\3\2\2\2\u010d\u0101\3\2\2\2\u010d\u0102\3\2\2\2\u010d")
        buf.write("\u0107\3\2\2\2\u010e\r\3\2\2\2\u010f\u0110\b\b\1\2\u0110")
        buf.write("\u0111\5\f\7\2\u0111\u011d\3\2\2\2\u0112\u0113\f\5\2\2")
        buf.write("\u0113\u0114\7E\2\2\u0114\u011c\5\f\7\2\u0115\u0116\f")
        buf.write("\4\2\2\u0116\u0117\7F\2\2\u0117\u011c\5\f\7\2\u0118\u0119")
        buf.write("\f\3\2\2\u0119\u011a\7G\2\2\u011a\u011c\5\f\7\2\u011b")
        buf.write("\u0112\3\2\2\2\u011b\u0115\3\2\2\2\u011b\u0118\3\2\2\2")
        buf.write("\u011c\u011f\3\2\2\2\u011d\u011b\3\2\2\2\u011d\u011e\3")
        buf.write("\2\2\2\u011e\17\3\2\2\2\u011f\u011d\3\2\2\2\u0120\u0121")
        buf.write("\b\t\1\2\u0121\u0122\5\16\b\2\u0122\u012b\3\2\2\2\u0123")
        buf.write("\u0124\f\4\2\2\u0124\u0125\7A\2\2\u0125\u012a\5\16\b\2")
        buf.write("\u0126\u0127\f\3\2\2\u0127\u0128\7C\2\2\u0128\u012a\5")
        buf.write("\16\b\2\u0129\u0123\3\2\2\2\u0129\u0126\3\2\2\2\u012a")
        buf.write("\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2")
        buf.write("\u012c\21\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u012f\b\n")
        buf.write("\1\2\u012f\u0130\5\20\t\2\u0130\u0139\3\2\2\2\u0131\u0132")
        buf.write("\f\4\2\2\u0132\u0133\7?\2\2\u0133\u0138\5\20\t\2\u0134")
        buf.write("\u0135\f\3\2\2\u0135\u0136\7@\2\2\u0136\u0138\5\20\t\2")
        buf.write("\u0137\u0131\3\2\2\2\u0137\u0134\3\2\2\2\u0138\u013b\3")
        buf.write("\2\2\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\23")
        buf.write("\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u013d\b\13\1\2\u013d")
        buf.write("\u013e\5\22\n\2\u013e\u014d\3\2\2\2\u013f\u0140\f\6\2")
        buf.write("\2\u0140\u0141\7;\2\2\u0141\u014c\5\22\n\2\u0142\u0143")
        buf.write("\f\5\2\2\u0143\u0144\7=\2\2\u0144\u014c\5\22\n\2\u0145")
        buf.write("\u0146\f\4\2\2\u0146\u0147\7<\2\2\u0147\u014c\5\22\n\2")
        buf.write("\u0148\u0149\f\3\2\2\u0149\u014a\7>\2\2\u014a\u014c\5")
        buf.write("\22\n\2\u014b\u013f\3\2\2\2\u014b\u0142\3\2\2\2\u014b")
        buf.write("\u0145\3\2\2\2\u014b\u0148\3\2\2\2\u014c\u014f\3\2\2\2")
        buf.write("\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e\25\3\2")
        buf.write("\2\2\u014f\u014d\3\2\2\2\u0150\u0151\b\f\1\2\u0151\u0152")
        buf.write("\5\24\13\2\u0152\u015b\3\2\2\2\u0153\u0154\f\4\2\2\u0154")
        buf.write("\u0155\7^\2\2\u0155\u015a\5\24\13\2\u0156\u0157\f\3\2")
        buf.write("\2\u0157\u0158\7_\2\2\u0158\u015a\5\24\13\2\u0159\u0153")
        buf.write("\3\2\2\2\u0159\u0156\3\2\2\2\u015a\u015d\3\2\2\2\u015b")
        buf.write("\u0159\3\2\2\2\u015b\u015c\3\2\2\2\u015c\27\3\2\2\2\u015d")
        buf.write("\u015b\3\2\2\2\u015e\u015f\b\r\1\2\u015f\u0160\5\26\f")
        buf.write("\2\u0160\u0166\3\2\2\2\u0161\u0162\f\3\2\2\u0162\u0163")
        buf.write("\7H\2\2\u0163\u0165\5\26\f\2\u0164\u0161\3\2\2\2\u0165")
        buf.write("\u0168\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167\3\2\2\2")
        buf.write("\u0167\31\3\2\2\2\u0168\u0166\3\2\2\2\u0169\u016a\b\16")
        buf.write("\1\2\u016a\u016b\5\30\r\2\u016b\u0171\3\2\2\2\u016c\u016d")
        buf.write("\f\3\2\2\u016d\u016e\7L\2\2\u016e\u0170\5\30\r\2\u016f")
        buf.write("\u016c\3\2\2\2\u0170\u0173\3\2\2\2\u0171\u016f\3\2\2\2")
        buf.write("\u0171\u0172\3\2\2\2\u0172\33\3\2\2\2\u0173\u0171\3\2")
        buf.write("\2\2\u0174\u0175\b\17\1\2\u0175\u0176\5\32\16\2\u0176")
        buf.write("\u017c\3\2\2\2\u0177\u0178\f\3\2\2\u0178\u0179\7I\2\2")
        buf.write("\u0179\u017b\5\32\16\2\u017a\u0177\3\2\2\2\u017b\u017e")
        buf.write("\3\2\2\2\u017c\u017a\3\2\2\2\u017c\u017d\3\2\2\2\u017d")
        buf.write("\35\3\2\2\2\u017e\u017c\3\2\2\2\u017f\u0180\b\20\1\2\u0180")
        buf.write("\u0181\5\34\17\2\u0181\u0187\3\2\2\2\u0182\u0183\f\3\2")
        buf.write("\2\u0183\u0184\7J\2\2\u0184\u0186\5\34\17\2\u0185\u0182")
        buf.write("\3\2\2\2\u0186\u0189\3\2\2\2\u0187\u0185\3\2\2\2\u0187")
        buf.write("\u0188\3\2\2\2\u0188\37\3\2\2\2\u0189\u0187\3\2\2\2\u018a")
        buf.write("\u018b\b\21\1\2\u018b\u018c\5\36\20\2\u018c\u0192\3\2")
        buf.write("\2\2\u018d\u018e\f\3\2\2\u018e\u018f\7K\2\2\u018f\u0191")
        buf.write("\5\36\20\2\u0190\u018d\3\2\2\2\u0191\u0194\3\2\2\2\u0192")
        buf.write("\u0190\3\2\2\2\u0192\u0193\3\2\2\2\u0193!\3\2\2\2\u0194")
        buf.write("\u0192\3\2\2\2\u0195\u019b\5 \21\2\u0196\u0197\7O\2\2")
        buf.write("\u0197\u0198\5(\25\2\u0198\u0199\7P\2\2\u0199\u019a\5")
        buf.write("\"\22\2\u019a\u019c\3\2\2\2\u019b\u0196\3\2\2\2\u019b")
        buf.write("\u019c\3\2\2\2\u019c#\3\2\2\2\u019d\u01a3\5\"\22\2\u019e")
        buf.write("\u019f\5\b\5\2\u019f\u01a0\5&\24\2\u01a0\u01a1\5$\23\2")
        buf.write("\u01a1\u01a3\3\2\2\2\u01a2\u019d\3\2\2\2\u01a2\u019e\3")
        buf.write("\2\2\2\u01a3%\3\2\2\2\u01a4\u01a5\t\3\2\2\u01a5\'\3\2")
        buf.write("\2\2\u01a6\u01a7\b\25\1\2\u01a7\u01a8\5$\23\2\u01a8\u01ae")
        buf.write("\3\2\2\2\u01a9\u01aa\f\3\2\2\u01aa\u01ab\7R\2\2\u01ab")
        buf.write("\u01ad\5$\23\2\u01ac\u01a9\3\2\2\2\u01ad\u01b0\3\2\2\2")
        buf.write("\u01ae\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af)\3\2\2")
        buf.write("\2\u01b0\u01ae\3\2\2\2\u01b1\u01b2\5\"\22\2\u01b2+\3\2")
        buf.write("\2\2\u01b3\u01b5\5.\30\2\u01b4\u01b6\5\64\33\2\u01b5\u01b4")
        buf.write("\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7")
        buf.write("\u01b8\7Q\2\2\u01b8\u01bb\3\2\2\2\u01b9\u01bb\5\u0084")
        buf.write("C\2\u01ba\u01b3\3\2\2\2\u01ba\u01b9\3\2\2\2\u01bb-\3\2")
        buf.write("\2\2\u01bc\u01be\5\62\32\2\u01bd\u01bc\3\2\2\2\u01be\u01bf")
        buf.write("\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0")
        buf.write("/\3\2\2\2\u01c1\u01c3\5\62\32\2\u01c2\u01c1\3\2\2\2\u01c3")
        buf.write("\u01c4\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5\3\2\2\2")
        buf.write("\u01c5\61\3\2\2\2\u01c6\u01cb\58\35\2\u01c7\u01cb\5:\36")
        buf.write("\2\u01c8\u01cb\5T+\2\u01c9\u01cb\5V,\2\u01ca\u01c6\3\2")
        buf.write("\2\2\u01ca\u01c7\3\2\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01c9")
        buf.write("\3\2\2\2\u01cb\63\3\2\2\2\u01cc\u01cd\b\33\1\2\u01cd\u01ce")
        buf.write("\5\66\34\2\u01ce\u01d4\3\2\2\2\u01cf\u01d0\f\3\2\2\u01d0")
        buf.write("\u01d1\7R\2\2\u01d1\u01d3\5\66\34\2\u01d2\u01cf\3\2\2")
        buf.write("\2\u01d3\u01d6\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d4\u01d5")
        buf.write("\3\2\2\2\u01d5\65\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d7\u01dd")
        buf.write("\5X-\2\u01d8\u01d9\5X-\2\u01d9\u01da\7S\2\2\u01da\u01db")
        buf.write("\5z>\2\u01db\u01dd\3\2\2\2\u01dc\u01d7\3\2\2\2\u01dc\u01d8")
        buf.write("\3\2\2\2\u01dd\67\3\2\2\2\u01de\u01df\t\4\2\2\u01df9\3")
        buf.write("\2\2\2\u01e0\u01ee\7(\2\2\u01e1\u01ee\7\f\2\2\u01e2\u01ee")
        buf.write("\7\37\2\2\u01e3\u01ee\7\32\2\2\u01e4\u01ee\7\33\2\2\u01e5")
        buf.write("\u01ee\7\25\2\2\u01e6\u01ee\7\21\2\2\u01e7\u01ee\7 \2")
        buf.write("\2\u01e8\u01ee\7\'\2\2\u01e9\u01ee\5R*\2\u01ea\u01ee\5")
        buf.write("<\37\2\u01eb\u01ee\5J&\2\u01ec\u01ee\5x=\2\u01ed\u01e0")
        buf.write("\3\2\2\2\u01ed\u01e1\3\2\2\2\u01ed\u01e2\3\2\2\2\u01ed")
        buf.write("\u01e3\3\2\2\2\u01ed\u01e4\3\2\2\2\u01ed\u01e5\3\2\2\2")
        buf.write("\u01ed\u01e6\3\2\2\2\u01ed\u01e7\3\2\2\2\u01ed\u01e8\3")
        buf.write("\2\2\2\u01ed\u01e9\3\2\2\2\u01ed\u01ea\3\2\2\2\u01ed\u01eb")
        buf.write("\3\2\2\2\u01ed\u01ec\3\2\2\2\u01ee;\3\2\2\2\u01ef\u01f1")
        buf.write("\5> \2\u01f0\u01f2\7c\2\2\u01f1\u01f0\3\2\2\2\u01f1\u01f2")
        buf.write("\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f4\79\2\2\u01f4")
        buf.write("\u01f5\5@!\2\u01f5\u01f6\7:\2\2\u01f6\u01fb\3\2\2\2\u01f7")
        buf.write("\u01f8\5> \2\u01f8\u01f9\7c\2\2\u01f9\u01fb\3\2\2\2\u01fa")
        buf.write("\u01ef\3\2\2\2\u01fa\u01f7\3\2\2\2\u01fb=\3\2\2\2\u01fc")
        buf.write("\u01fd\t\5\2\2\u01fd?\3\2\2\2\u01fe\u01ff\b!\1\2\u01ff")
        buf.write("\u0200\5B\"\2\u0200\u0205\3\2\2\2\u0201\u0202\f\3\2\2")
        buf.write("\u0202\u0204\5B\"\2\u0203\u0201\3\2\2\2\u0204\u0207\3")
        buf.write("\2\2\2\u0205\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206A")
        buf.write("\3\2\2\2\u0207\u0205\3\2\2\2\u0208\u020a\5D#\2\u0209\u020b")
        buf.write("\5F$\2\u020a\u0209\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c")
        buf.write("\3\2\2\2\u020c\u020d\7Q\2\2\u020d\u0210\3\2\2\2\u020e")
        buf.write("\u0210\5\u0084C\2\u020f\u0208\3\2\2\2\u020f\u020e\3\2")
        buf.write("\2\2\u0210C\3\2\2\2\u0211\u0213\5:\36\2\u0212\u0214\5")
        buf.write("D#\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u021a")
        buf.write("\3\2\2\2\u0215\u0217\5T+\2\u0216\u0218\5D#\2\u0217\u0216")
        buf.write("\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u021a\3\2\2\2\u0219")
        buf.write("\u0211\3\2\2\2\u0219\u0215\3\2\2\2\u021aE\3\2\2\2\u021b")
        buf.write("\u021c\b$\1\2\u021c\u021d\5H%\2\u021d\u0223\3\2\2\2\u021e")
        buf.write("\u021f\f\3\2\2\u021f\u0220\7R\2\2\u0220\u0222\5H%\2\u0221")
        buf.write("\u021e\3\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3\2\2\2")
        buf.write("\u0223\u0224\3\2\2\2\u0224G\3\2\2\2\u0225\u0223\3\2\2")
        buf.write("\2\u0226\u022d\5X-\2\u0227\u0229\5X-\2\u0228\u0227\3\2")
        buf.write("\2\2\u0228\u0229\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022b")
        buf.write("\7P\2\2\u022b\u022d\5*\26\2\u022c\u0226\3\2\2\2\u022c")
        buf.write("\u0228\3\2\2\2\u022dI\3\2\2\2\u022e\u0230\7\23\2\2\u022f")
        buf.write("\u0231\7c\2\2\u0230\u022f\3\2\2\2\u0230\u0231\3\2\2\2")
        buf.write("\u0231\u0232\3\2\2\2\u0232\u0233\79\2\2\u0233\u0234\5")
        buf.write("L\'\2\u0234\u0235\7:\2\2\u0235\u0242\3\2\2\2\u0236\u0238")
        buf.write("\7\23\2\2\u0237\u0239\7c\2\2\u0238\u0237\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023b\79\2\2")
        buf.write("\u023b\u023c\5L\'\2\u023c\u023d\7R\2\2\u023d\u023e\7:")
        buf.write("\2\2\u023e\u0242\3\2\2\2\u023f\u0240\7\23\2\2\u0240\u0242")
        buf.write("\7c\2\2\u0241\u022e\3\2\2\2\u0241\u0236\3\2\2\2\u0241")
        buf.write("\u023f\3\2\2\2\u0242K\3\2\2\2\u0243\u0244\b\'\1\2\u0244")
        buf.write("\u0245\5N(\2\u0245\u024b\3\2\2\2\u0246\u0247\f\3\2\2\u0247")
        buf.write("\u0248\7R\2\2\u0248\u024a\5N(\2\u0249\u0246\3\2\2\2\u024a")
        buf.write("\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2")
        buf.write("\u024cM\3\2\2\2\u024d\u024b\3\2\2\2\u024e\u0254\5P)\2")
        buf.write("\u024f\u0250\5P)\2\u0250\u0251\7S\2\2\u0251\u0252\5*\26")
        buf.write("\2\u0252\u0254\3\2\2\2\u0253\u024e\3\2\2\2\u0253\u024f")
        buf.write("\3\2\2\2\u0254O\3\2\2\2\u0255\u0256\7c\2\2\u0256Q\3\2")
        buf.write("\2\2\u0257\u0258\7-\2\2\u0258\u0259\7\65\2\2\u0259\u025a")
        buf.write("\5r:\2\u025a\u025b\7\66\2\2\u025bS\3\2\2\2\u025c\u025d")
        buf.write("\t\6\2\2\u025dU\3\2\2\2\u025e\u0265\t\7\2\2\u025f\u0265")
        buf.write("\5^\60\2\u0260\u0261\7\6\2\2\u0261\u0262\7\65\2\2\u0262")
        buf.write("\u0263\7c\2\2\u0263\u0265\7\66\2\2\u0264\u025e\3\2\2\2")
        buf.write("\u0264\u025f\3\2\2\2\u0264\u0260\3\2\2\2\u0265W\3\2\2")
        buf.write("\2\u0266\u0268\5f\64\2\u0267\u0266\3\2\2\2\u0267\u0268")
        buf.write("\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026d\5Z.\2\u026a\u026c")
        buf.write("\5\\/\2\u026b\u026a\3\2\2\2\u026c\u026f\3\2\2\2\u026d")
        buf.write("\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026eY\3\2\2\2\u026f")
        buf.write("\u026d\3\2\2\2\u0270\u0271\b.\1\2\u0271\u0277\7c\2\2\u0272")
        buf.write("\u0273\7\65\2\2\u0273\u0274\5X-\2\u0274\u0275\7\66\2\2")
        buf.write("\u0275\u0277\3\2\2\2\u0276\u0270\3\2\2\2\u0276\u0272\3")
        buf.write("\2\2\2\u0277\u02a5\3\2\2\2\u0278\u0279\f\b\2\2\u0279\u027b")
        buf.write("\7\67\2\2\u027a\u027c\5h\65\2\u027b\u027a\3\2\2\2\u027b")
        buf.write("\u027c\3\2\2\2\u027c\u027e\3\2\2\2\u027d\u027f\5$\23\2")
        buf.write("\u027e\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0280\3")
        buf.write("\2\2\2\u0280\u02a4\78\2\2\u0281\u0282\f\7\2\2\u0282\u0283")
        buf.write("\7\67\2\2\u0283\u0285\7\"\2\2\u0284\u0286\5h\65\2\u0285")
        buf.write("\u0284\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2")
        buf.write("\u0287\u0288\5$\23\2\u0288\u0289\78\2\2\u0289\u02a4\3")
        buf.write("\2\2\2\u028a\u028b\f\6\2\2\u028b\u028c\7\67\2\2\u028c")
        buf.write("\u028d\5h\65\2\u028d\u028e\7\"\2\2\u028e\u028f\5$\23\2")
        buf.write("\u028f\u0290\78\2\2\u0290\u02a4\3\2\2\2\u0291\u0292\f")
        buf.write("\5\2\2\u0292\u0294\7\67\2\2\u0293\u0295\5h\65\2\u0294")
        buf.write("\u0293\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u0296\3\2\2\2")
        buf.write("\u0296\u0297\7E\2\2\u0297\u02a4\78\2\2\u0298\u0299\f\4")
        buf.write("\2\2\u0299\u029a\7\65\2\2\u029a\u029b\5j\66\2\u029b\u029c")
        buf.write("\7\66\2\2\u029c\u02a4\3\2\2\2\u029d\u029e\f\3\2\2\u029e")
        buf.write("\u02a0\7\65\2\2\u029f\u02a1\5p9\2\u02a0\u029f\3\2\2\2")
        buf.write("\u02a0\u02a1\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a4\7")
        buf.write("\66\2\2\u02a3\u0278\3\2\2\2\u02a3\u0281\3\2\2\2\u02a3")
        buf.write("\u028a\3\2\2\2\u02a3\u0291\3\2\2\2\u02a3\u0298\3\2\2\2")
        buf.write("\u02a3\u029d\3\2\2\2\u02a4\u02a7\3\2\2\2\u02a5\u02a3\3")
        buf.write("\2\2\2\u02a5\u02a6\3\2\2\2\u02a6[\3\2\2\2\u02a7\u02a5")
        buf.write("\3\2\2\2\u02a8\u02a9\7\7\2\2\u02a9\u02ab\7\65\2\2\u02aa")
        buf.write("\u02ac\7e\2\2\u02ab\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2")
        buf.write("\u02ad\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af\3")
        buf.write("\2\2\2\u02af\u02b2\7\66\2\2\u02b0\u02b2\5^\60\2\u02b1")
        buf.write("\u02a8\3\2\2\2\u02b1\u02b0\3\2\2\2\u02b2]\3\2\2\2\u02b3")
        buf.write("\u02b4\7\b\2\2\u02b4\u02b5\7\65\2\2\u02b5\u02b6\7\65\2")
        buf.write("\2\u02b6\u02b7\5`\61\2\u02b7\u02b8\7\66\2\2\u02b8\u02b9")
        buf.write("\7\66\2\2\u02b9_\3\2\2\2\u02ba\u02bf\5b\62\2\u02bb\u02bc")
        buf.write("\7R\2\2\u02bc\u02be\5b\62\2\u02bd\u02bb\3\2\2\2\u02be")
        buf.write("\u02c1\3\2\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2")
        buf.write("\u02c0\u02c4\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c2\u02c4\3")
        buf.write("\2\2\2\u02c3\u02ba\3\2\2\2\u02c3\u02c2\3\2\2\2\u02c4a")
        buf.write("\3\2\2\2\u02c5\u02cb\n\b\2\2\u02c6\u02c8\7\65\2\2\u02c7")
        buf.write("\u02c9\5\6\4\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9\3\2\2\2")
        buf.write("\u02c9\u02ca\3\2\2\2\u02ca\u02cc\7\66\2\2\u02cb\u02c6")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd")
        buf.write("\u02cf\3\2\2\2\u02ce\u02c5\3\2\2\2\u02ce\u02cd\3\2\2\2")
        buf.write("\u02cfc\3\2\2\2\u02d0\u02d6\n\t\2\2\u02d1\u02d2\7\65\2")
        buf.write("\2\u02d2\u02d3\5d\63\2\u02d3\u02d4\7\66\2\2\u02d4\u02d6")
        buf.write("\3\2\2\2\u02d5\u02d0\3\2\2\2\u02d5\u02d1\3\2\2\2\u02d6")
        buf.write("\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2")
        buf.write("\u02d8e\3\2\2\2\u02d9\u02d7\3\2\2\2\u02da\u02dc\7E\2\2")
        buf.write("\u02db\u02dd\5h\65\2\u02dc\u02db\3\2\2\2\u02dc\u02dd\3")
        buf.write("\2\2\2\u02dd\u02ed\3\2\2\2\u02de\u02e0\7E\2\2\u02df\u02e1")
        buf.write("\5h\65\2\u02e0\u02df\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02ed\5f\64\2\u02e3\u02e5\7L\2\2")
        buf.write("\u02e4\u02e6\5h\65\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3")
        buf.write("\2\2\2\u02e6\u02ed\3\2\2\2\u02e7\u02e9\7L\2\2\u02e8\u02ea")
        buf.write("\5h\65\2\u02e9\u02e8\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea")
        buf.write("\u02eb\3\2\2\2\u02eb\u02ed\5f\64\2\u02ec\u02da\3\2\2\2")
        buf.write("\u02ec\u02de\3\2\2\2\u02ec\u02e3\3\2\2\2\u02ec\u02e7\3")
        buf.write("\2\2\2\u02edg\3\2\2\2\u02ee\u02ef\b\65\1\2\u02ef\u02f0")
        buf.write("\5T+\2\u02f0\u02f5\3\2\2\2\u02f1\u02f2\f\3\2\2\u02f2\u02f4")
        buf.write("\5T+\2\u02f3\u02f1\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6i\3\2\2\2\u02f7\u02f5")
        buf.write("\3\2\2\2\u02f8\u02fe\5l\67\2\u02f9\u02fa\5l\67\2\u02fa")
        buf.write("\u02fb\7R\2\2\u02fb\u02fc\7b\2\2\u02fc\u02fe\3\2\2\2\u02fd")
        buf.write("\u02f8\3\2\2\2\u02fd\u02f9\3\2\2\2\u02fek\3\2\2\2\u02ff")
        buf.write("\u0300\b\67\1\2\u0300\u0301\5n8\2\u0301\u0307\3\2\2\2")
        buf.write("\u0302\u0303\f\3\2\2\u0303\u0304\7R\2\2\u0304\u0306\5")
        buf.write("n8\2\u0305\u0302\3\2\2\2\u0306\u0309\3\2\2\2\u0307\u0305")
        buf.write("\3\2\2\2\u0307\u0308\3\2\2\2\u0308m\3\2\2\2\u0309\u0307")
        buf.write("\3\2\2\2\u030a\u030b\5.\30\2\u030b\u030c\5X-\2\u030c\u0312")
        buf.write("\3\2\2\2\u030d\u030f\5\60\31\2\u030e\u0310\5t;\2\u030f")
        buf.write("\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0312\3\2\2\2")
        buf.write("\u0311\u030a\3\2\2\2\u0311\u030d\3\2\2\2\u0312o\3\2\2")
        buf.write("\2\u0313\u0314\b9\1\2\u0314\u0315\7c\2\2\u0315\u031b\3")
        buf.write("\2\2\2\u0316\u0317\f\3\2\2\u0317\u0318\7R\2\2\u0318\u031a")
        buf.write("\7c\2\2\u0319\u0316\3\2\2\2\u031a\u031d\3\2\2\2\u031b")
        buf.write("\u0319\3\2\2\2\u031b\u031c\3\2\2\2\u031cq\3\2\2\2\u031d")
        buf.write("\u031b\3\2\2\2\u031e\u0320\5D#\2\u031f\u0321\5t;\2\u0320")
        buf.write("\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321s\3\2\2\2\u0322")
        buf.write("\u032e\5f\64\2\u0323\u0325\5f\64\2\u0324\u0323\3\2\2\2")
        buf.write("\u0324\u0325\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u032a\5")
        buf.write("v<\2\u0327\u0329\5\\/\2\u0328\u0327\3\2\2\2\u0329\u032c")
        buf.write("\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b\3\2\2\2\u032b")
        buf.write("\u032e\3\2\2\2\u032c\u032a\3\2\2\2\u032d\u0322\3\2\2\2")
        buf.write("\u032d\u0324\3\2\2\2\u032eu\3\2\2\2\u032f\u0330\b<\1\2")
        buf.write("\u0330\u0331\7\65\2\2\u0331\u0332\5t;\2\u0332\u0336\7")
        buf.write("\66\2\2\u0333\u0335\5\\/\2\u0334\u0333\3\2\2\2\u0335\u0338")
        buf.write("\3\2\2\2\u0336\u0334\3\2\2\2\u0336\u0337\3\2\2\2\u0337")
        buf.write("\u035e\3\2\2\2\u0338\u0336\3\2\2\2\u0339\u033b\7\67\2")
        buf.write("\2\u033a\u033c\5h\65\2\u033b\u033a\3\2\2\2\u033b\u033c")
        buf.write("\3\2\2\2\u033c\u033e\3\2\2\2\u033d\u033f\5$\23\2\u033e")
        buf.write("\u033d\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340\3\2\2\2")
        buf.write("\u0340\u035e\78\2\2\u0341\u0342\7\67\2\2\u0342\u0344\7")
        buf.write("\"\2\2\u0343\u0345\5h\65\2\u0344\u0343\3\2\2\2\u0344\u0345")
        buf.write("\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0347\5$\23\2\u0347")
        buf.write("\u0348\78\2\2\u0348\u035e\3\2\2\2\u0349\u034a\7\67\2\2")
        buf.write("\u034a\u034b\5h\65\2\u034b\u034c\7\"\2\2\u034c\u034d\5")
        buf.write("$\23\2\u034d\u034e\78\2\2\u034e\u035e\3\2\2\2\u034f\u0350")
        buf.write("\7\67\2\2\u0350\u0351\7E\2\2\u0351\u035e\78\2\2\u0352")
        buf.write("\u0354\7\65\2\2\u0353\u0355\5j\66\2\u0354\u0353\3\2\2")
        buf.write("\2\u0354\u0355\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u035a")
        buf.write("\7\66\2\2\u0357\u0359\5\\/\2\u0358\u0357\3\2\2\2\u0359")
        buf.write("\u035c\3\2\2\2\u035a\u0358\3\2\2\2\u035a\u035b\3\2\2\2")
        buf.write("\u035b\u035e\3\2\2\2\u035c\u035a\3\2\2\2\u035d\u032f\3")
        buf.write("\2\2\2\u035d\u0339\3\2\2\2\u035d\u0341\3\2\2\2\u035d\u0349")
        buf.write("\3\2\2\2\u035d\u034f\3\2\2\2\u035d\u0352\3\2\2\2\u035e")
        buf.write("\u038a\3\2\2\2\u035f\u0360\f\7\2\2\u0360\u0362\7\67\2")
        buf.write("\2\u0361\u0363\5h\65\2\u0362\u0361\3\2\2\2\u0362\u0363")
        buf.write("\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0366\5$\23\2\u0365")
        buf.write("\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367\3\2\2\2")
        buf.write("\u0367\u0389\78\2\2\u0368\u0369\f\6\2\2\u0369\u036a\7")
        buf.write("\67\2\2\u036a\u036c\7\"\2\2\u036b\u036d\5h\65\2\u036c")
        buf.write("\u036b\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036e\3\2\2\2")
        buf.write("\u036e\u036f\5$\23\2\u036f\u0370\78\2\2\u0370\u0389\3")
        buf.write("\2\2\2\u0371\u0372\f\5\2\2\u0372\u0373\7\67\2\2\u0373")
        buf.write("\u0374\5h\65\2\u0374\u0375\7\"\2\2\u0375\u0376\5$\23\2")
        buf.write("\u0376\u0377\78\2\2\u0377\u0389\3\2\2\2\u0378\u0379\f")
        buf.write("\4\2\2\u0379\u037a\7\67\2\2\u037a\u037b\7E\2\2\u037b\u0389")
        buf.write("\78\2\2\u037c\u037d\f\3\2\2\u037d\u037f\7\65\2\2\u037e")
        buf.write("\u0380\5j\66\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2\2\2")
        buf.write("\u0380\u0381\3\2\2\2\u0381\u0385\7\66\2\2\u0382\u0384")
        buf.write("\5\\/\2\u0383\u0382\3\2\2\2\u0384\u0387\3\2\2\2\u0385")
        buf.write("\u0383\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0389\3\2\2\2")
        buf.write("\u0387\u0385\3\2\2\2\u0388\u035f\3\2\2\2\u0388\u0368\3")
        buf.write("\2\2\2\u0388\u0371\3\2\2\2\u0388\u0378\3\2\2\2\u0388\u037c")
        buf.write("\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a")
        buf.write("\u038b\3\2\2\2\u038bw\3\2\2\2\u038c\u038a\3\2\2\2\u038d")
        buf.write("\u038e\7c\2\2\u038ey\3\2\2\2\u038f\u039a\5$\23\2\u0390")
        buf.write("\u0391\79\2\2\u0391\u0392\5|?\2\u0392\u0393\7:\2\2\u0393")
        buf.write("\u039a\3\2\2\2\u0394\u0395\79\2\2\u0395\u0396\5|?\2\u0396")
        buf.write("\u0397\7R\2\2\u0397\u0398\7:\2\2\u0398\u039a\3\2\2\2\u0399")
        buf.write("\u038f\3\2\2\2\u0399\u0390\3\2\2\2\u0399\u0394\3\2\2\2")
        buf.write("\u039a{\3\2\2\2\u039b\u039d\b?\1\2\u039c\u039e\5~@\2\u039d")
        buf.write("\u039c\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f\3\2\2\2")
        buf.write("\u039f\u03a0\5z>\2\u03a0\u03a9\3\2\2\2\u03a1\u03a2\f\3")
        buf.write("\2\2\u03a2\u03a4\7R\2\2\u03a3\u03a5\5~@\2\u03a4\u03a3")
        buf.write("\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6")
        buf.write("\u03a8\5z>\2\u03a7\u03a1\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9")
        buf.write("\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa}\3\2\2\2\u03ab")
        buf.write("\u03a9\3\2\2\2\u03ac\u03ad\5\u0080A\2\u03ad\u03ae\7S\2")
        buf.write("\2\u03ae\177\3\2\2\2\u03af\u03b0\bA\1\2\u03b0\u03b1\5")
        buf.write("\u0082B\2\u03b1\u03b6\3\2\2\2\u03b2\u03b3\f\3\2\2\u03b3")
        buf.write("\u03b5\5\u0082B\2\u03b4\u03b2\3\2\2\2\u03b5\u03b8\3\2")
        buf.write("\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u0081")
        buf.write("\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b9\u03ba\7\67\2\2\u03ba")
        buf.write("\u03bb\5*\26\2\u03bb\u03bc\78\2\2\u03bc\u03c0\3\2\2\2")
        buf.write("\u03bd\u03be\7a\2\2\u03be\u03c0\7c\2\2\u03bf\u03b9\3\2")
        buf.write("\2\2\u03bf\u03bd\3\2\2\2\u03c0\u0083\3\2\2\2\u03c1\u03c2")
        buf.write("\7\63\2\2\u03c2\u03c3\7\65\2\2\u03c3\u03c4\5*\26\2\u03c4")
        buf.write("\u03c6\7R\2\2\u03c5\u03c7\7e\2\2\u03c6\u03c5\3\2\2\2\u03c7")
        buf.write("\u03c8\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2")
        buf.write("\u03c9\u03ca\3\2\2\2\u03ca\u03cb\7\66\2\2\u03cb\u03cc")
        buf.write("\7Q\2\2\u03cc\u0085\3\2\2\2\u03cd\u03d4\5\u0088E\2\u03ce")
        buf.write("\u03d4\5\u008aF\2\u03cf\u03d4\5\u0090I\2\u03d0\u03d4\5")
        buf.write("\u0092J\2\u03d1\u03d4\5\u0094K\2\u03d2\u03d4\5\u0096L")
        buf.write("\2\u03d3\u03cd\3\2\2\2\u03d3\u03ce\3\2\2\2\u03d3\u03cf")
        buf.write("\3\2\2\2\u03d3\u03d0\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d3")
        buf.write("\u03d2\3\2\2\2\u03d4\u0087\3\2\2\2\u03d5\u03d6\7c\2\2")
        buf.write("\u03d6\u03d7\7P\2\2\u03d7\u03e1\5\u0086D\2\u03d8\u03d9")
        buf.write("\7\13\2\2\u03d9\u03da\5*\26\2\u03da\u03db\7P\2\2\u03db")
        buf.write("\u03dc\5\u0086D\2\u03dc\u03e1\3\2\2\2\u03dd\u03de\7\17")
        buf.write("\2\2\u03de\u03df\7P\2\2\u03df\u03e1\5\u0086D\2\u03e0\u03d5")
        buf.write("\3\2\2\2\u03e0\u03d8\3\2\2\2\u03e0\u03dd\3\2\2\2\u03e1")
        buf.write("\u0089\3\2\2\2\u03e2\u03e4\79\2\2\u03e3\u03e5\5\u008c")
        buf.write("G\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6")
        buf.write("\3\2\2\2\u03e6\u03e7\7:\2\2\u03e7\u008b\3\2\2\2\u03e8")
        buf.write("\u03e9\bG\1\2\u03e9\u03ea\5\u008eH\2\u03ea\u03ef\3\2\2")
        buf.write("\2\u03eb\u03ec\f\3\2\2\u03ec\u03ee\5\u008eH\2\u03ed\u03eb")
        buf.write("\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef")
        buf.write("\u03f0\3\2\2\2\u03f0\u008d\3\2\2\2\u03f1\u03ef\3\2\2\2")
        buf.write("\u03f2\u03f5\5,\27\2\u03f3\u03f5\5\u0086D\2\u03f4\u03f2")
        buf.write("\3\2\2\2\u03f4\u03f3\3\2\2\2\u03f5\u008f\3\2\2\2\u03f6")
        buf.write("\u03f8\5(\25\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2")
        buf.write("\u03f8\u03f9\3\2\2\2\u03f9\u03fa\7Q\2\2\u03fa\u0091\3")
        buf.write("\2\2\2\u03fb\u03fc\7\30\2\2\u03fc\u03fd\7\65\2\2\u03fd")
        buf.write("\u03fe\5(\25\2\u03fe\u03ff\7\66\2\2\u03ff\u0402\5\u0086")
        buf.write("D\2\u0400\u0401\7\22\2\2\u0401\u0403\5\u0086D\2\u0402")
        buf.write("\u0400\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u040b\3\2\2\2")
        buf.write("\u0404\u0405\7$\2\2\u0405\u0406\7\65\2\2\u0406\u0407\5")
        buf.write("(\25\2\u0407\u0408\7\66\2\2\u0408\u0409\5\u0086D\2\u0409")
        buf.write("\u040b\3\2\2\2\u040a\u03fb\3\2\2\2\u040a\u0404\3\2\2\2")
        buf.write("\u040b\u0093\3\2\2\2\u040c\u040d\7*\2\2\u040d\u040e\7")
        buf.write("\65\2\2\u040e\u040f\5(\25\2\u040f\u0410\7\66\2\2\u0410")
        buf.write("\u0411\5\u0086D\2\u0411\u0437\3\2\2\2\u0412\u0413\7\20")
        buf.write("\2\2\u0413\u0414\5\u0086D\2\u0414\u0415\7*\2\2\u0415\u0416")
        buf.write("\7\65\2\2\u0416\u0417\5(\25\2\u0417\u0418\7\66\2\2\u0418")
        buf.write("\u0419\7Q\2\2\u0419\u0437\3\2\2\2\u041a\u041b\7\26\2\2")
        buf.write("\u041b\u041d\7\65\2\2\u041c\u041e\5(\25\2\u041d\u041c")
        buf.write("\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f")
        buf.write("\u0421\7Q\2\2\u0420\u0422\5(\25\2\u0421\u0420\3\2\2\2")
        buf.write("\u0421\u0422\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0425\7")
        buf.write("Q\2\2\u0424\u0426\5(\25\2\u0425\u0424\3\2\2\2\u0425\u0426")
        buf.write("\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\7\66\2\2\u0428")
        buf.write("\u0437\5\u0086D\2\u0429\u042a\7\26\2\2\u042a\u042b\7\65")
        buf.write("\2\2\u042b\u042d\5,\27\2\u042c\u042e\5(\25\2\u042d\u042c")
        buf.write("\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042f\3\2\2\2\u042f")
        buf.write("\u0431\7Q\2\2\u0430\u0432\5(\25\2\u0431\u0430\3\2\2\2")
        buf.write("\u0431\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0434\7")
        buf.write("\66\2\2\u0434\u0435\5\u0086D\2\u0435\u0437\3\2\2\2\u0436")
        buf.write("\u040c\3\2\2\2\u0436\u0412\3\2\2\2\u0436\u041a\3\2\2\2")
        buf.write("\u0436\u0429\3\2\2\2\u0437\u0095\3\2\2\2\u0438\u0439\7")
        buf.write("\27\2\2\u0439\u043a\7c\2\2\u043a\u0449\7Q\2\2\u043b\u043c")
        buf.write("\7\16\2\2\u043c\u0449\7Q\2\2\u043d\u043e\7\n\2\2\u043e")
        buf.write("\u0449\7Q\2\2\u043f\u0441\7\36\2\2\u0440\u0442\5(\25\2")
        buf.write("\u0441\u0440\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0443\3")
        buf.write("\2\2\2\u0443\u0449\7Q\2\2\u0444\u0445\7\27\2\2\u0445\u0446")
        buf.write("\5\b\5\2\u0446\u0447\7Q\2\2\u0447\u0449\3\2\2\2\u0448")
        buf.write("\u0438\3\2\2\2\u0448\u043b\3\2\2\2\u0448\u043d\3\2\2\2")
        buf.write("\u0448\u043f\3\2\2\2\u0448\u0444\3\2\2\2\u0449\u0097\3")
        buf.write("\2\2\2\u044a\u044c\5\u009aN\2\u044b\u044a\3\2\2\2\u044b")
        buf.write("\u044c\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044e\7\2\2\3")
        buf.write("\u044e\u0099\3\2\2\2\u044f\u0450\bN\1\2\u0450\u0451\5")
        buf.write("\u009cO\2\u0451\u0456\3\2\2\2\u0452\u0453\f\3\2\2\u0453")
        buf.write("\u0455\5\u009cO\2\u0454\u0452\3\2\2\2\u0455\u0458\3\2")
        buf.write("\2\2\u0456\u0454\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u009b")
        buf.write("\3\2\2\2\u0458\u0456\3\2\2\2\u0459\u045d\5\u009eP\2\u045a")
        buf.write("\u045d\5,\27\2\u045b\u045d\7Q\2\2\u045c\u0459\3\2\2\2")
        buf.write("\u045c\u045a\3\2\2\2\u045c\u045b\3\2\2\2\u045d\u009d\3")
        buf.write("\2\2\2\u045e\u0460\5.\30\2\u045f\u045e\3\2\2\2\u045f\u0460")
        buf.write("\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0463\5X-\2\u0462\u0464")
        buf.write("\5\u00a0Q\2\u0463\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464")
        buf.write("\u0465\3\2\2\2\u0465\u0466\5\u008aF\2\u0466\u009f\3\2")
        buf.write("\2\2\u0467\u0468\bQ\1\2\u0468\u0469\5,\27\2\u0469\u046e")
        buf.write("\3\2\2\2\u046a\u046b\f\3\2\2\u046b\u046d\5,\27\2\u046c")
        buf.write("\u046a\3\2\2\2\u046d\u0470\3\2\2\2\u046e\u046c\3\2\2\2")
        buf.write("\u046e\u046f\3\2\2\2\u046f\u00a1\3\2\2\2\u0470\u046e\3")
        buf.write("\2\2\2\u0083\u00a7\u00ad\u00c0\u00ca\u00d7\u00d9\u00e4")
        buf.write("\u00fd\u010d\u011b\u011d\u0129\u012b\u0137\u0139\u014b")
        buf.write("\u014d\u0159\u015b\u0166\u0171\u017c\u0187\u0192\u019b")
        buf.write("\u01a2\u01ae\u01b5\u01ba\u01bf\u01c4\u01ca\u01d4\u01dc")
        buf.write("\u01ed\u01f1\u01fa\u0205\u020a\u020f\u0213\u0217\u0219")
        buf.write("\u0223\u0228\u022c\u0230\u0238\u0241\u024b\u0253\u0264")
        buf.write("\u0267\u026d\u0276\u027b\u027e\u0285\u0294\u02a0\u02a3")
        buf.write("\u02a5\u02ad\u02b1\u02bf\u02c3\u02c8\u02cb\u02ce\u02d5")
        buf.write("\u02d7\u02dc\u02e0\u02e5\u02e9\u02ec\u02f5\u02fd\u0307")
        buf.write("\u030f\u0311\u031b\u0320\u0324\u032a\u032d\u0336\u033b")
        buf.write("\u033e\u0344\u0354\u035a\u035d\u0362\u0365\u036c\u037f")
        buf.write("\u0385\u0388\u038a\u0399\u039d\u03a4\u03a9\u03b6\u03bf")
        buf.write("\u03c8\u03d3\u03e0\u03e4\u03ef\u03f4\u03f7\u0402\u040a")
        buf.write("\u041d\u0421\u0425\u042d\u0431\u0436\u0441\u0448\u044b")
        buf.write("\u0456\u045c\u045f\u0463\u046e")
        return buf.getvalue()


class SimpleCParser ( Parser ):

    grammarFileName = "SimpleC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__inline__'", "'__stdcall'", 
                     "'__declspec'", "'__asm'", "'__attribute__'", "'auto'", 
                     "'break'", "'case'", "'char'", "'const'", "'continue'", 
                     "'default'", "'do'", "'double'", "'else'", "'enum'", 
                     "'extern'", "'float'", "'for'", "'goto'", "'if'", "'inline'", 
                     "'int'", "'long'", "'register'", "'restrict'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", 
                     "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
                     "'volatile'", "'while'", "'_Alignas'", "'_Alignof'", 
                     "'_Atomic'", "'_Bool'", "'_Complex'", "'_Generic'", 
                     "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'?'", "':'", "';'", "','", "'='", "'*='", "'/='", 
                     "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
                     "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Auto", "Break", 
                      "Case", "Char", "Const", "Continue", "Default", "Do", 
                      "Double", "Else", "Enum", "Extern", "Float", "For", 
                      "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Struct", "Switch", "Typedef", "Union", 
                      "Unsigned", "Void", "Volatile", "While", "Alignas", 
                      "Alignof", "Atomic", "Bool", "Complex", "Generic", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
                      "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
                      "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "StringLiteral", "Define", "Include", "AsmBlock", 
                      "LineAfterPreprocessing", "LineDirective", "PragmaDirective", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ]

    RULE_primaryExpression = 0
    RULE_postfixExpression = 1
    RULE_argumentExpressionList = 2
    RULE_unaryExpression = 3
    RULE_unaryOperator = 4
    RULE_castExpression = 5
    RULE_multiplicativeExpression = 6
    RULE_additiveExpression = 7
    RULE_shiftExpression = 8
    RULE_relationalExpression = 9
    RULE_equalityExpression = 10
    RULE_andExpression = 11
    RULE_exclusiveOrExpression = 12
    RULE_inclusiveOrExpression = 13
    RULE_logicalAndExpression = 14
    RULE_logicalOrExpression = 15
    RULE_conditionalExpression = 16
    RULE_assignmentExpression = 17
    RULE_assignmentOperator = 18
    RULE_expression = 19
    RULE_constantExpression = 20
    RULE_declaration = 21
    RULE_declarationSpecifiers = 22
    RULE_declarationSpecifiers2 = 23
    RULE_declarationSpecifier = 24
    RULE_initDeclaratorList = 25
    RULE_initDeclarator = 26
    RULE_storageClassSpecifier = 27
    RULE_typeSpecifier = 28
    RULE_structOrUnionSpecifier = 29
    RULE_structOrUnion = 30
    RULE_structDeclarationList = 31
    RULE_structDeclaration = 32
    RULE_specifierQualifierList = 33
    RULE_structDeclaratorList = 34
    RULE_structDeclarator = 35
    RULE_enumSpecifier = 36
    RULE_enumeratorList = 37
    RULE_enumerator = 38
    RULE_enumerationConstant = 39
    RULE_atomicTypeSpecifier = 40
    RULE_typeQualifier = 41
    RULE_functionSpecifier = 42
    RULE_declarator = 43
    RULE_directDeclarator = 44
    RULE_gccDeclaratorExtension = 45
    RULE_gccAttributeSpecifier = 46
    RULE_gccAttributeList = 47
    RULE_gccAttribute = 48
    RULE_nestedParenthesesBlock = 49
    RULE_pointer = 50
    RULE_typeQualifierList = 51
    RULE_parameterTypeList = 52
    RULE_parameterList = 53
    RULE_parameterDeclaration = 54
    RULE_identifierList = 55
    RULE_typeName = 56
    RULE_abstractDeclarator = 57
    RULE_directAbstractDeclarator = 58
    RULE_typedefName = 59
    RULE_initializer = 60
    RULE_initializerList = 61
    RULE_designation = 62
    RULE_designatorList = 63
    RULE_designator = 64
    RULE_staticAssertDeclaration = 65
    RULE_statement = 66
    RULE_labeledStatement = 67
    RULE_compoundStatement = 68
    RULE_blockItemList = 69
    RULE_blockItem = 70
    RULE_expressionStatement = 71
    RULE_selectionStatement = 72
    RULE_iterationStatement = 73
    RULE_jumpStatement = 74
    RULE_compilationUnit = 75
    RULE_translationUnit = 76
    RULE_externalDeclaration = 77
    RULE_functionDefinition = 78
    RULE_declarationList = 79

    ruleNames =  [ "primaryExpression", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                   "structOrUnion", "structDeclarationList", "structDeclaration", 
                   "specifierQualifierList", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "declarator", "directDeclarator", "gccDeclaratorExtension", 
                   "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "jumpStatement", 
                   "compilationUnit", "translationUnit", "externalDeclaration", 
                   "functionDefinition", "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    Auto=7
    Break=8
    Case=9
    Char=10
    Const=11
    Continue=12
    Default=13
    Do=14
    Double=15
    Else=16
    Enum=17
    Extern=18
    Float=19
    For=20
    Goto=21
    If=22
    Inline=23
    Int=24
    Long=25
    Register=26
    Restrict=27
    Return=28
    Short=29
    Signed=30
    Sizeof=31
    Static=32
    Struct=33
    Switch=34
    Typedef=35
    Union=36
    Unsigned=37
    Void=38
    Volatile=39
    While=40
    Alignas=41
    Alignof=42
    Atomic=43
    Bool=44
    Complex=45
    Generic=46
    Imaginary=47
    Noreturn=48
    StaticAssert=49
    ThreadLocal=50
    LeftParen=51
    RightParen=52
    LeftBracket=53
    RightBracket=54
    LeftBrace=55
    RightBrace=56
    Less=57
    LessEqual=58
    Greater=59
    GreaterEqual=60
    LeftShift=61
    RightShift=62
    Plus=63
    PlusPlus=64
    Minus=65
    MinusMinus=66
    Star=67
    Div=68
    Mod=69
    And=70
    Or=71
    AndAnd=72
    OrOr=73
    Caret=74
    Not=75
    Tilde=76
    Question=77
    Colon=78
    Semi=79
    Comma=80
    Assign=81
    StarAssign=82
    DivAssign=83
    ModAssign=84
    PlusAssign=85
    MinusAssign=86
    LeftShiftAssign=87
    RightShiftAssign=88
    AndAssign=89
    XorAssign=90
    OrAssign=91
    Equal=92
    NotEqual=93
    Arrow=94
    Dot=95
    Ellipsis=96
    Identifier=97
    Constant=98
    StringLiteral=99
    Define=100
    Include=101
    AsmBlock=102
    LineAfterPreprocessing=103
    LineDirective=104
    PragmaDirective=105
    Whitespace=106
    Newline=107
    BlockComment=108
    LineComment=109

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def Constant(self):
            return self.getToken(SimpleCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleCParser.StringLiteral)
            else:
                return self.getToken(SimpleCParser.StringLiteral, i)

        def expression(self):
            return self.getTypedRuleContext(SimpleCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SimpleCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        try:
            self.state = 171
            token = self._input.LA(1)
            if token in [SimpleCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 160
                self.match(SimpleCParser.Identifier)

            elif token in [SimpleCParser.Constant]:
                self.enterOuterAlt(localctx, 2)
                self.state = 161
                self.match(SimpleCParser.Constant)

            elif token in [SimpleCParser.StringLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 163 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 162
                        self.match(SimpleCParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 165 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)


            elif token in [SimpleCParser.LeftParen]:
                self.enterOuterAlt(localctx, 4)
                self.state = 167
                self.match(SimpleCParser.LeftParen)
                self.state = 168
                self.expression(0)
                self.state = 169
                self.match(SimpleCParser.RightParen)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(SimpleCParser.PrimaryExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SimpleCParser.TypeNameContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(SimpleCParser.InitializerListContext,0)


        def postfixExpression(self):
            return self.getTypedRuleContext(SimpleCParser.PostfixExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SimpleCParser.ExpressionContext,0)


        def argumentExpressionList(self):
            return self.getTypedRuleContext(SimpleCParser.ArgumentExpressionListContext,0)


        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def getRuleIndex(self):
            return SimpleCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 174
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 175
                self.match(SimpleCParser.LeftParen)
                self.state = 176
                self.typeName()
                self.state = 177
                self.match(SimpleCParser.RightParen)
                self.state = 178
                self.match(SimpleCParser.LeftBrace)
                self.state = 179
                self.initializerList(0)
                self.state = 180
                self.match(SimpleCParser.RightBrace)
                pass

            elif la_ == 3:
                self.state = 182
                self.match(SimpleCParser.LeftParen)
                self.state = 183
                self.typeName()
                self.state = 184
                self.match(SimpleCParser.RightParen)
                self.state = 185
                self.match(SimpleCParser.LeftBrace)
                self.state = 186
                self.initializerList(0)
                self.state = 187
                self.match(SimpleCParser.Comma)
                self.state = 188
                self.match(SimpleCParser.RightBrace)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 213
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                    if la_ == 1:
                        localctx = SimpleCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 192
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 193
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 194
                        self.expression(0)
                        self.state = 195
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = SimpleCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 197
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 198
                        self.match(SimpleCParser.LeftParen)
                        self.state = 200
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                            self.state = 199
                            self.argumentExpressionList(0)


                        self.state = 202
                        self.match(SimpleCParser.RightParen)
                        pass

                    elif la_ == 3:
                        localctx = SimpleCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 203
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 204
                        self.match(SimpleCParser.Dot)
                        self.state = 205
                        self.match(SimpleCParser.Identifier)
                        pass

                    elif la_ == 4:
                        localctx = SimpleCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 206
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 207
                        self.match(SimpleCParser.Arrow)
                        self.state = 208
                        self.match(SimpleCParser.Identifier)
                        pass

                    elif la_ == 5:
                        localctx = SimpleCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 209
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 210
                        self.match(SimpleCParser.PlusPlus)
                        pass

                    elif la_ == 6:
                        localctx = SimpleCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 211
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 212
                        self.match(SimpleCParser.MinusMinus)
                        pass

             
                self.state = 217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ArgumentExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AssignmentExpressionContext,0)


        def argumentExpressionList(self):
            return self.getTypedRuleContext(SimpleCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)



    def argumentExpressionList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.ArgumentExpressionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_argumentExpressionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.ArgumentExpressionListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_argumentExpressionList)
                    self.state = 221
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 222
                    self.match(SimpleCParser.Comma)
                    self.state = 223
                    self.assignmentExpression() 
                self.state = 228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(SimpleCParser.PostfixExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(SimpleCParser.UnaryExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(SimpleCParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(SimpleCParser.CastExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SimpleCParser.TypeNameContext,0)


        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def getRuleIndex(self):
            return SimpleCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = SimpleCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unaryExpression)
        try:
            self.state = 251
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 230
                self.match(SimpleCParser.PlusPlus)
                self.state = 231
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 232
                self.match(SimpleCParser.MinusMinus)
                self.state = 233
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 234
                self.unaryOperator()
                self.state = 235
                self.castExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 237
                self.match(SimpleCParser.Sizeof)
                self.state = 238
                self.unaryExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 239
                self.match(SimpleCParser.Sizeof)
                self.state = 240
                self.match(SimpleCParser.LeftParen)
                self.state = 241
                self.typeName()
                self.state = 242
                self.match(SimpleCParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 244
                self.match(SimpleCParser.Alignof)
                self.state = 245
                self.match(SimpleCParser.LeftParen)
                self.state = 246
                self.typeName()
                self.state = 247
                self.match(SimpleCParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 249
                self.match(SimpleCParser.AndAnd)
                self.state = 250
                self.match(SimpleCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SimpleCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = SimpleCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            _la = self._input.LA(1)
            if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (SimpleCParser.Plus - 63)) | (1 << (SimpleCParser.Minus - 63)) | (1 << (SimpleCParser.Star - 63)) | (1 << (SimpleCParser.And - 63)) | (1 << (SimpleCParser.Not - 63)) | (1 << (SimpleCParser.Tilde - 63)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(SimpleCParser.UnaryExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SimpleCParser.TypeNameContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(SimpleCParser.CastExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = SimpleCParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_castExpression)
        try:
            self.state = 267
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 255
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                self.match(SimpleCParser.LeftParen)
                self.state = 257
                self.typeName()
                self.state = 258
                self.match(SimpleCParser.RightParen)
                self.state = 259
                self.castExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 261
                self.match(SimpleCParser.T__0)
                self.state = 262
                self.match(SimpleCParser.LeftParen)
                self.state = 263
                self.typeName()
                self.state = 264
                self.match(SimpleCParser.RightParen)
                self.state = 265
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self):
            return self.getTypedRuleContext(SimpleCParser.CastExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(SimpleCParser.MultiplicativeExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_multiplicativeExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.castExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 281
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        localctx = SimpleCParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 272
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 273
                        self.match(SimpleCParser.Star)
                        self.state = 274
                        self.castExpression()
                        pass

                    elif la_ == 2:
                        localctx = SimpleCParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 275
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 276
                        self.match(SimpleCParser.Div)
                        self.state = 277
                        self.castExpression()
                        pass

                    elif la_ == 3:
                        localctx = SimpleCParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 278
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 279
                        self.match(SimpleCParser.Mod)
                        self.state = 280
                        self.castExpression()
                        pass

             
                self.state = 285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(SimpleCParser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AdditiveExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_additiveExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 295
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                    if la_ == 1:
                        localctx = SimpleCParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 289
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 290
                        self.match(SimpleCParser.Plus)
                        self.state = 291
                        self.multiplicativeExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = SimpleCParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 292
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 293
                        self.match(SimpleCParser.Minus)
                        self.state = 294
                        self.multiplicativeExpression(0)
                        pass

             
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AdditiveExpressionContext,0)


        def shiftExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ShiftExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)



    def shiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 309
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        localctx = SimpleCParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 303
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 304
                        self.match(SimpleCParser.LeftShift)
                        self.state = 305
                        self.additiveExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = SimpleCParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 306
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 307
                        self.match(SimpleCParser.RightShift)
                        self.state = 308
                        self.additiveExpression(0)
                        pass

             
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ShiftExpressionContext,0)


        def relationalExpression(self):
            return self.getTypedRuleContext(SimpleCParser.RelationalExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)



    def relationalExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_relationalExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 329
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                    if la_ == 1:
                        localctx = SimpleCParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 317
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 318
                        self.match(SimpleCParser.Less)
                        self.state = 319
                        self.shiftExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = SimpleCParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 320
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 321
                        self.match(SimpleCParser.Greater)
                        self.state = 322
                        self.shiftExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = SimpleCParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 323
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 324
                        self.match(SimpleCParser.LessEqual)
                        self.state = 325
                        self.shiftExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = SimpleCParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 326
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 327
                        self.match(SimpleCParser.GreaterEqual)
                        self.state = 328
                        self.shiftExpression(0)
                        pass

             
                self.state = 333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(SimpleCParser.RelationalExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(SimpleCParser.EqualityExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 343
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                    if la_ == 1:
                        localctx = SimpleCParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 337
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 338
                        self.match(SimpleCParser.Equal)
                        self.state = 339
                        self.relationalExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = SimpleCParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 340
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 341
                        self.match(SimpleCParser.NotEqual)
                        self.state = 342
                        self.relationalExpression(0)
                        pass

             
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(SimpleCParser.EqualityExpressionContext,0)


        def andExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AndExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)



    def andExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.AndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_andExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 356
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.AndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andExpression)
                    self.state = 351
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 352
                    self.match(SimpleCParser.And)
                    self.state = 353
                    self.equalityExpression(0) 
                self.state = 358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AndExpressionContext,0)


        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ExclusiveOrExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)



    def exclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.ExclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_exclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.andExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 367
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.ExclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveOrExpression)
                    self.state = 362
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 363
                    self.match(SimpleCParser.Caret)
                    self.state = 364
                    self.andExpression(0) 
                self.state = 369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ExclusiveOrExpressionContext,0)


        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(SimpleCParser.InclusiveOrExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)



    def inclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.InclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_inclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.exclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.InclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveOrExpression)
                    self.state = 373
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 374
                    self.match(SimpleCParser.Or)
                    self.state = 375
                    self.exclusiveOrExpression(0) 
                self.state = 380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(SimpleCParser.InclusiveOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(SimpleCParser.LogicalAndExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)



    def logicalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.inclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 384
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 385
                    self.match(SimpleCParser.AndAnd)
                    self.state = 386
                    self.inclusiveOrExpression(0) 
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self):
            return self.getTypedRuleContext(SimpleCParser.LogicalAndExpressionContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(SimpleCParser.LogicalOrExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)



    def logicalOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.LogicalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_logicalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.logicalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 400
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.LogicalOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalOrExpression)
                    self.state = 395
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 396
                    self.match(SimpleCParser.OrOr)
                    self.state = 397
                    self.logicalAndExpression(0) 
                self.state = 402
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(SimpleCParser.LogicalOrExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SimpleCParser.ExpressionContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = SimpleCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.logicalOrExpression(0)
            self.state = 409
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 404
                self.match(SimpleCParser.Question)
                self.state = 405
                self.expression(0)
                self.state = 406
                self.match(SimpleCParser.Colon)
                self.state = 407
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(SimpleCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(SimpleCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = SimpleCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_assignmentExpression)
        try:
            self.state = 416
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 411
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.unaryExpression()
                self.state = 413
                self.assignmentOperator()
                self.state = 414
                self.assignmentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SimpleCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = SimpleCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            _la = self._input.LA(1)
            if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (SimpleCParser.Assign - 81)) | (1 << (SimpleCParser.StarAssign - 81)) | (1 << (SimpleCParser.DivAssign - 81)) | (1 << (SimpleCParser.ModAssign - 81)) | (1 << (SimpleCParser.PlusAssign - 81)) | (1 << (SimpleCParser.MinusAssign - 81)) | (1 << (SimpleCParser.LeftShiftAssign - 81)) | (1 << (SimpleCParser.RightShiftAssign - 81)) | (1 << (SimpleCParser.AndAssign - 81)) | (1 << (SimpleCParser.XorAssign - 81)) | (1 << (SimpleCParser.OrAssign - 81)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AssignmentExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SimpleCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 428
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 423
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 424
                    self.match(SimpleCParser.Comma)
                    self.state = 425
                    self.assignmentExpression() 
                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = SimpleCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(SimpleCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(SimpleCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = SimpleCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 440
            token = self._input.LA(1)
            if token in [SimpleCParser.T__1, SimpleCParser.T__2, SimpleCParser.T__3, SimpleCParser.T__5, SimpleCParser.Auto, SimpleCParser.Char, SimpleCParser.Const, SimpleCParser.Double, SimpleCParser.Enum, SimpleCParser.Extern, SimpleCParser.Float, SimpleCParser.Inline, SimpleCParser.Int, SimpleCParser.Long, SimpleCParser.Register, SimpleCParser.Restrict, SimpleCParser.Short, SimpleCParser.Signed, SimpleCParser.Static, SimpleCParser.Struct, SimpleCParser.Typedef, SimpleCParser.Union, SimpleCParser.Unsigned, SimpleCParser.Void, SimpleCParser.Volatile, SimpleCParser.Atomic, SimpleCParser.Noreturn, SimpleCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 433
                self.declarationSpecifiers()
                self.state = 435
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (SimpleCParser.LeftParen - 51)) | (1 << (SimpleCParser.Star - 51)) | (1 << (SimpleCParser.Caret - 51)) | (1 << (SimpleCParser.Identifier - 51)))) != 0):
                    self.state = 434
                    self.initDeclaratorList(0)


                self.state = 437
                self.match(SimpleCParser.Semi)

            elif token in [SimpleCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.staticAssertDeclaration()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return SimpleCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = SimpleCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 442
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 445 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifiers2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return SimpleCParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)




    def declarationSpecifiers2(self):

        localctx = SimpleCParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_declarationSpecifiers2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 447
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 450 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(SimpleCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.FunctionSpecifierContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = SimpleCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declarationSpecifier)
        try:
            self.state = 456
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 453
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 454
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 455
                self.functionSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.InitDeclaratorContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(SimpleCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)



    def initDeclaratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.InitDeclaratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_initDeclaratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.initDeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 466
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.InitDeclaratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initDeclaratorList)
                    self.state = 461
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 462
                    self.match(SimpleCParser.Comma)
                    self.state = 463
                    self.initDeclarator() 
                self.state = 468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(SimpleCParser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(SimpleCParser.InitializerContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = SimpleCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_initDeclarator)
        try:
            self.state = 474
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 469
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 470
                self.declarator()
                self.state = 471
                self.match(SimpleCParser.Assign)
                self.state = 472
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SimpleCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = SimpleCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Auto) | (1 << SimpleCParser.Extern) | (1 << SimpleCParser.Register) | (1 << SimpleCParser.Static) | (1 << SimpleCParser.Typedef))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(SimpleCParser.TypedefNameContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)




    def typeSpecifier(self):

        localctx = SimpleCParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_typeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            token = self._input.LA(1)
            if token in [SimpleCParser.Void]:
                self.state = 478
                self.match(SimpleCParser.Void)

            elif token in [SimpleCParser.Char]:
                self.state = 479
                self.match(SimpleCParser.Char)

            elif token in [SimpleCParser.Short]:
                self.state = 480
                self.match(SimpleCParser.Short)

            elif token in [SimpleCParser.Int]:
                self.state = 481
                self.match(SimpleCParser.Int)

            elif token in [SimpleCParser.Long]:
                self.state = 482
                self.match(SimpleCParser.Long)

            elif token in [SimpleCParser.Float]:
                self.state = 483
                self.match(SimpleCParser.Float)

            elif token in [SimpleCParser.Double]:
                self.state = 484
                self.match(SimpleCParser.Double)

            elif token in [SimpleCParser.Signed]:
                self.state = 485
                self.match(SimpleCParser.Signed)

            elif token in [SimpleCParser.Unsigned]:
                self.state = 486
                self.match(SimpleCParser.Unsigned)

            elif token in [SimpleCParser.Atomic]:
                self.state = 487
                self.atomicTypeSpecifier()

            elif token in [SimpleCParser.Struct, SimpleCParser.Union]:
                self.state = 488
                self.structOrUnionSpecifier()

            elif token in [SimpleCParser.Enum]:
                self.state = 489
                self.enumSpecifier()

            elif token in [SimpleCParser.Identifier]:
                self.state = 490
                self.typedefName()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructOrUnionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(SimpleCParser.StructOrUnionContext,0)


        def structDeclarationList(self):
            return self.getTypedRuleContext(SimpleCParser.StructDeclarationListContext,0)


        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def getRuleIndex(self):
            return SimpleCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = SimpleCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 504
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.structOrUnion()
                self.state = 495
                _la = self._input.LA(1)
                if _la==SimpleCParser.Identifier:
                    self.state = 494
                    self.match(SimpleCParser.Identifier)


                self.state = 497
                self.match(SimpleCParser.LeftBrace)
                self.state = 498
                self.structDeclarationList(0)
                self.state = 499
                self.match(SimpleCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self.structOrUnion()
                self.state = 502
                self.match(SimpleCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructOrUnionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SimpleCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = SimpleCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            _la = self._input.LA(1)
            if not(_la==SimpleCParser.Struct or _la==SimpleCParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self):
            return self.getTypedRuleContext(SimpleCParser.StructDeclarationContext,0)


        def structDeclarationList(self):
            return self.getTypedRuleContext(SimpleCParser.StructDeclarationListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)



    def structDeclarationList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.StructDeclarationListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_structDeclarationList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.structDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.StructDeclarationListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structDeclarationList)
                    self.state = 511
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 512
                    self.structDeclaration() 
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(SimpleCParser.SpecifierQualifierListContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(SimpleCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(SimpleCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = SimpleCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 525
            token = self._input.LA(1)
            if token in [SimpleCParser.Char, SimpleCParser.Const, SimpleCParser.Double, SimpleCParser.Enum, SimpleCParser.Float, SimpleCParser.Int, SimpleCParser.Long, SimpleCParser.Restrict, SimpleCParser.Short, SimpleCParser.Signed, SimpleCParser.Struct, SimpleCParser.Union, SimpleCParser.Unsigned, SimpleCParser.Void, SimpleCParser.Volatile, SimpleCParser.Atomic, SimpleCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.specifierQualifierList()
                self.state = 520
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (SimpleCParser.LeftParen - 51)) | (1 << (SimpleCParser.Star - 51)) | (1 << (SimpleCParser.Caret - 51)) | (1 << (SimpleCParser.Colon - 51)) | (1 << (SimpleCParser.Identifier - 51)))) != 0):
                    self.state = 519
                    self.structDeclaratorList(0)


                self.state = 522
                self.match(SimpleCParser.Semi)

            elif token in [SimpleCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 524
                self.staticAssertDeclaration()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecifierQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.TypeSpecifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(SimpleCParser.SpecifierQualifierListContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(SimpleCParser.TypeQualifierContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = SimpleCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_specifierQualifierList)
        try:
            self.state = 535
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.typeSpecifier()
                self.state = 529
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 528
                    self.specifierQualifierList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.typeQualifier()
                self.state = 533
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 532
                    self.specifierQualifierList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.StructDeclaratorContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(SimpleCParser.StructDeclaratorListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)



    def structDeclaratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.StructDeclaratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_structDeclaratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.structDeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.StructDeclaratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structDeclaratorList)
                    self.state = 540
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 541
                    self.match(SimpleCParser.Comma)
                    self.state = 542
                    self.structDeclarator() 
                self.state = 547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class StructDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(SimpleCParser.DeclaratorContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = SimpleCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 554
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 550
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (SimpleCParser.LeftParen - 51)) | (1 << (SimpleCParser.Star - 51)) | (1 << (SimpleCParser.Caret - 51)) | (1 << (SimpleCParser.Identifier - 51)))) != 0):
                    self.state = 549
                    self.declarator()


                self.state = 552
                self.match(SimpleCParser.Colon)
                self.state = 553
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratorList(self):
            return self.getTypedRuleContext(SimpleCParser.EnumeratorListContext,0)


        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def getRuleIndex(self):
            return SimpleCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = SimpleCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self.match(SimpleCParser.Enum)
                self.state = 558
                _la = self._input.LA(1)
                if _la==SimpleCParser.Identifier:
                    self.state = 557
                    self.match(SimpleCParser.Identifier)


                self.state = 560
                self.match(SimpleCParser.LeftBrace)
                self.state = 561
                self.enumeratorList(0)
                self.state = 562
                self.match(SimpleCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.match(SimpleCParser.Enum)
                self.state = 566
                _la = self._input.LA(1)
                if _la==SimpleCParser.Identifier:
                    self.state = 565
                    self.match(SimpleCParser.Identifier)


                self.state = 568
                self.match(SimpleCParser.LeftBrace)
                self.state = 569
                self.enumeratorList(0)
                self.state = 570
                self.match(SimpleCParser.Comma)
                self.state = 571
                self.match(SimpleCParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 573
                self.match(SimpleCParser.Enum)
                self.state = 574
                self.match(SimpleCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(SimpleCParser.EnumeratorContext,0)


        def enumeratorList(self):
            return self.getTypedRuleContext(SimpleCParser.EnumeratorListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)



    def enumeratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.EnumeratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_enumeratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.enumerator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.EnumeratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorList)
                    self.state = 580
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 581
                    self.match(SimpleCParser.Comma)
                    self.state = 582
                    self.enumerator() 
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(SimpleCParser.EnumerationConstantContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = SimpleCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_enumerator)
        try:
            self.state = 593
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.enumerationConstant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.enumerationConstant()
                self.state = 590
                self.match(SimpleCParser.Assign)
                self.state = 591
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumerationConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def getRuleIndex(self):
            return SimpleCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = SimpleCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(SimpleCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SimpleCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = SimpleCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(SimpleCParser.Atomic)
            self.state = 598
            self.match(SimpleCParser.LeftParen)
            self.state = 599
            self.typeName()
            self.state = 600
            self.match(SimpleCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SimpleCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = SimpleCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.GccAttributeSpecifierContext,0)


        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def getRuleIndex(self):
            return SimpleCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = SimpleCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 610
            token = self._input.LA(1)
            if token in [SimpleCParser.T__1, SimpleCParser.T__2, SimpleCParser.Inline, SimpleCParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__1) | (1 << SimpleCParser.T__2) | (1 << SimpleCParser.Inline) | (1 << SimpleCParser.Noreturn))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [SimpleCParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.gccAttributeSpecifier()

            elif token in [SimpleCParser.T__3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 606
                self.match(SimpleCParser.T__3)
                self.state = 607
                self.match(SimpleCParser.LeftParen)
                self.state = 608
                self.match(SimpleCParser.Identifier)
                self.state = 609
                self.match(SimpleCParser.RightParen)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(SimpleCParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return SimpleCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = SimpleCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            _la = self._input.LA(1)
            if _la==SimpleCParser.Star or _la==SimpleCParser.Caret:
                self.state = 612
                self.pointer()


            self.state = 615
            self.directDeclarator(0)
            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 616
                    self.gccDeclaratorExtension() 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def declarator(self):
            return self.getTypedRuleContext(SimpleCParser.DeclaratorContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.DirectDeclaratorContext,0)


        def typeQualifierList(self):
            return self.getTypedRuleContext(SimpleCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AssignmentExpressionContext,0)


        def parameterTypeList(self):
            return self.getTypedRuleContext(SimpleCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SimpleCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            token = self._input.LA(1)
            if token in [SimpleCParser.Identifier]:
                self.state = 623
                self.match(SimpleCParser.Identifier)

            elif token in [SimpleCParser.LeftParen]:
                self.state = 624
                self.match(SimpleCParser.LeftParen)
                self.state = 625
                self.declarator()
                self.state = 626
                self.match(SimpleCParser.RightParen)

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 675
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 673
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                    if la_ == 1:
                        localctx = SimpleCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 630
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 631
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 633
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                            self.state = 632
                            self.typeQualifierList(0)


                        self.state = 636
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                            self.state = 635
                            self.assignmentExpression()


                        self.state = 638
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = SimpleCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 639
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 640
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 641
                        self.match(SimpleCParser.Static)
                        self.state = 643
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                            self.state = 642
                            self.typeQualifierList(0)


                        self.state = 645
                        self.assignmentExpression()
                        self.state = 646
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = SimpleCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 648
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 649
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 650
                        self.typeQualifierList(0)
                        self.state = 651
                        self.match(SimpleCParser.Static)
                        self.state = 652
                        self.assignmentExpression()
                        self.state = 653
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = SimpleCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 655
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 656
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 658
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                            self.state = 657
                            self.typeQualifierList(0)


                        self.state = 660
                        self.match(SimpleCParser.Star)
                        self.state = 661
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = SimpleCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 662
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 663
                        self.match(SimpleCParser.LeftParen)
                        self.state = 664
                        self.parameterTypeList()
                        self.state = 665
                        self.match(SimpleCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = SimpleCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 667
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 668
                        self.match(SimpleCParser.LeftParen)
                        self.state = 670
                        _la = self._input.LA(1)
                        if _la==SimpleCParser.Identifier:
                            self.state = 669
                            self.identifierList(0)


                        self.state = 672
                        self.match(SimpleCParser.RightParen)
                        pass

             
                self.state = 677
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class GccDeclaratorExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleCParser.StringLiteral)
            else:
                return self.getToken(SimpleCParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(SimpleCParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = SimpleCParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 687
            token = self._input.LA(1)
            if token in [SimpleCParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 678
                self.match(SimpleCParser.T__4)
                self.state = 679
                self.match(SimpleCParser.LeftParen)
                self.state = 681 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 680
                    self.match(SimpleCParser.StringLiteral)
                    self.state = 683 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SimpleCParser.StringLiteral):
                        break

                self.state = 685
                self.match(SimpleCParser.RightParen)

            elif token in [SimpleCParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.gccAttributeSpecifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttributeList(self):
            return self.getTypedRuleContext(SimpleCParser.GccAttributeListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = SimpleCParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(SimpleCParser.T__5)
            self.state = 690
            self.match(SimpleCParser.LeftParen)
            self.state = 691
            self.match(SimpleCParser.LeftParen)
            self.state = 692
            self.gccAttributeList()
            self.state = 693
            self.match(SimpleCParser.RightParen)
            self.state = 694
            self.match(SimpleCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.GccAttributeContext,i)


        def getRuleIndex(self):
            return SimpleCParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = SimpleCParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.state = 705
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.gccAttribute()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleCParser.Comma:
                    self.state = 697
                    self.match(SimpleCParser.Comma)
                    self.state = 698
                    self.gccAttribute()
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpressionList(self):
            return self.getTypedRuleContext(SimpleCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = SimpleCParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.state = 716
            token = self._input.LA(1)
            if token in [SimpleCParser.T__0, SimpleCParser.T__1, SimpleCParser.T__2, SimpleCParser.T__3, SimpleCParser.T__4, SimpleCParser.T__5, SimpleCParser.Auto, SimpleCParser.Break, SimpleCParser.Case, SimpleCParser.Char, SimpleCParser.Const, SimpleCParser.Continue, SimpleCParser.Default, SimpleCParser.Do, SimpleCParser.Double, SimpleCParser.Else, SimpleCParser.Enum, SimpleCParser.Extern, SimpleCParser.Float, SimpleCParser.For, SimpleCParser.Goto, SimpleCParser.If, SimpleCParser.Inline, SimpleCParser.Int, SimpleCParser.Long, SimpleCParser.Register, SimpleCParser.Restrict, SimpleCParser.Return, SimpleCParser.Short, SimpleCParser.Signed, SimpleCParser.Sizeof, SimpleCParser.Static, SimpleCParser.Struct, SimpleCParser.Switch, SimpleCParser.Typedef, SimpleCParser.Union, SimpleCParser.Unsigned, SimpleCParser.Void, SimpleCParser.Volatile, SimpleCParser.While, SimpleCParser.Alignas, SimpleCParser.Alignof, SimpleCParser.Atomic, SimpleCParser.Bool, SimpleCParser.Complex, SimpleCParser.Generic, SimpleCParser.Imaginary, SimpleCParser.Noreturn, SimpleCParser.StaticAssert, SimpleCParser.ThreadLocal, SimpleCParser.LeftBracket, SimpleCParser.RightBracket, SimpleCParser.LeftBrace, SimpleCParser.RightBrace, SimpleCParser.Less, SimpleCParser.LessEqual, SimpleCParser.Greater, SimpleCParser.GreaterEqual, SimpleCParser.LeftShift, SimpleCParser.RightShift, SimpleCParser.Plus, SimpleCParser.PlusPlus, SimpleCParser.Minus, SimpleCParser.MinusMinus, SimpleCParser.Star, SimpleCParser.Div, SimpleCParser.Mod, SimpleCParser.And, SimpleCParser.Or, SimpleCParser.AndAnd, SimpleCParser.OrOr, SimpleCParser.Caret, SimpleCParser.Not, SimpleCParser.Tilde, SimpleCParser.Question, SimpleCParser.Colon, SimpleCParser.Semi, SimpleCParser.Assign, SimpleCParser.StarAssign, SimpleCParser.DivAssign, SimpleCParser.ModAssign, SimpleCParser.PlusAssign, SimpleCParser.MinusAssign, SimpleCParser.LeftShiftAssign, SimpleCParser.RightShiftAssign, SimpleCParser.AndAssign, SimpleCParser.XorAssign, SimpleCParser.OrAssign, SimpleCParser.Equal, SimpleCParser.NotEqual, SimpleCParser.Arrow, SimpleCParser.Dot, SimpleCParser.Ellipsis, SimpleCParser.Identifier, SimpleCParser.Constant, SimpleCParser.StringLiteral, SimpleCParser.Define, SimpleCParser.Include, SimpleCParser.AsmBlock, SimpleCParser.LineAfterPreprocessing, SimpleCParser.LineDirective, SimpleCParser.PragmaDirective, SimpleCParser.Whitespace, SimpleCParser.Newline, SimpleCParser.BlockComment, SimpleCParser.LineComment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (SimpleCParser.LeftParen - 51)) | (1 << (SimpleCParser.RightParen - 51)) | (1 << (SimpleCParser.Comma - 51)))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 713
                _la = self._input.LA(1)
                if _la==SimpleCParser.LeftParen:
                    self.state = 708
                    self.match(SimpleCParser.LeftParen)
                    self.state = 710
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                        self.state = 709
                        self.argumentExpressionList(0)


                    self.state = 712
                    self.match(SimpleCParser.RightParen)



            elif token in [SimpleCParser.RightParen, SimpleCParser.Comma]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedParenthesesBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.NestedParenthesesBlockContext,i)


        def getRuleIndex(self):
            return SimpleCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = SimpleCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.T__1) | (1 << SimpleCParser.T__2) | (1 << SimpleCParser.T__3) | (1 << SimpleCParser.T__4) | (1 << SimpleCParser.T__5) | (1 << SimpleCParser.Auto) | (1 << SimpleCParser.Break) | (1 << SimpleCParser.Case) | (1 << SimpleCParser.Char) | (1 << SimpleCParser.Const) | (1 << SimpleCParser.Continue) | (1 << SimpleCParser.Default) | (1 << SimpleCParser.Do) | (1 << SimpleCParser.Double) | (1 << SimpleCParser.Else) | (1 << SimpleCParser.Enum) | (1 << SimpleCParser.Extern) | (1 << SimpleCParser.Float) | (1 << SimpleCParser.For) | (1 << SimpleCParser.Goto) | (1 << SimpleCParser.If) | (1 << SimpleCParser.Inline) | (1 << SimpleCParser.Int) | (1 << SimpleCParser.Long) | (1 << SimpleCParser.Register) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Return) | (1 << SimpleCParser.Short) | (1 << SimpleCParser.Signed) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Static) | (1 << SimpleCParser.Struct) | (1 << SimpleCParser.Switch) | (1 << SimpleCParser.Typedef) | (1 << SimpleCParser.Union) | (1 << SimpleCParser.Unsigned) | (1 << SimpleCParser.Void) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.While) | (1 << SimpleCParser.Alignas) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.Atomic) | (1 << SimpleCParser.Bool) | (1 << SimpleCParser.Complex) | (1 << SimpleCParser.Generic) | (1 << SimpleCParser.Imaginary) | (1 << SimpleCParser.Noreturn) | (1 << SimpleCParser.StaticAssert) | (1 << SimpleCParser.ThreadLocal) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.LeftBracket) | (1 << SimpleCParser.RightBracket) | (1 << SimpleCParser.LeftBrace) | (1 << SimpleCParser.RightBrace) | (1 << SimpleCParser.Less) | (1 << SimpleCParser.LessEqual) | (1 << SimpleCParser.Greater) | (1 << SimpleCParser.GreaterEqual) | (1 << SimpleCParser.LeftShift) | (1 << SimpleCParser.RightShift) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.Div - 64)) | (1 << (SimpleCParser.Mod - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.Or - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.OrOr - 64)) | (1 << (SimpleCParser.Caret - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Question - 64)) | (1 << (SimpleCParser.Colon - 64)) | (1 << (SimpleCParser.Semi - 64)) | (1 << (SimpleCParser.Comma - 64)) | (1 << (SimpleCParser.Assign - 64)) | (1 << (SimpleCParser.StarAssign - 64)) | (1 << (SimpleCParser.DivAssign - 64)) | (1 << (SimpleCParser.ModAssign - 64)) | (1 << (SimpleCParser.PlusAssign - 64)) | (1 << (SimpleCParser.MinusAssign - 64)) | (1 << (SimpleCParser.LeftShiftAssign - 64)) | (1 << (SimpleCParser.RightShiftAssign - 64)) | (1 << (SimpleCParser.AndAssign - 64)) | (1 << (SimpleCParser.XorAssign - 64)) | (1 << (SimpleCParser.OrAssign - 64)) | (1 << (SimpleCParser.Equal - 64)) | (1 << (SimpleCParser.NotEqual - 64)) | (1 << (SimpleCParser.Arrow - 64)) | (1 << (SimpleCParser.Dot - 64)) | (1 << (SimpleCParser.Ellipsis - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)) | (1 << (SimpleCParser.Define - 64)) | (1 << (SimpleCParser.Include - 64)) | (1 << (SimpleCParser.AsmBlock - 64)) | (1 << (SimpleCParser.LineAfterPreprocessing - 64)) | (1 << (SimpleCParser.LineDirective - 64)) | (1 << (SimpleCParser.PragmaDirective - 64)) | (1 << (SimpleCParser.Whitespace - 64)) | (1 << (SimpleCParser.Newline - 64)) | (1 << (SimpleCParser.BlockComment - 64)) | (1 << (SimpleCParser.LineComment - 64)))) != 0):
                self.state = 723
                token = self._input.LA(1)
                if token in [SimpleCParser.T__0, SimpleCParser.T__1, SimpleCParser.T__2, SimpleCParser.T__3, SimpleCParser.T__4, SimpleCParser.T__5, SimpleCParser.Auto, SimpleCParser.Break, SimpleCParser.Case, SimpleCParser.Char, SimpleCParser.Const, SimpleCParser.Continue, SimpleCParser.Default, SimpleCParser.Do, SimpleCParser.Double, SimpleCParser.Else, SimpleCParser.Enum, SimpleCParser.Extern, SimpleCParser.Float, SimpleCParser.For, SimpleCParser.Goto, SimpleCParser.If, SimpleCParser.Inline, SimpleCParser.Int, SimpleCParser.Long, SimpleCParser.Register, SimpleCParser.Restrict, SimpleCParser.Return, SimpleCParser.Short, SimpleCParser.Signed, SimpleCParser.Sizeof, SimpleCParser.Static, SimpleCParser.Struct, SimpleCParser.Switch, SimpleCParser.Typedef, SimpleCParser.Union, SimpleCParser.Unsigned, SimpleCParser.Void, SimpleCParser.Volatile, SimpleCParser.While, SimpleCParser.Alignas, SimpleCParser.Alignof, SimpleCParser.Atomic, SimpleCParser.Bool, SimpleCParser.Complex, SimpleCParser.Generic, SimpleCParser.Imaginary, SimpleCParser.Noreturn, SimpleCParser.StaticAssert, SimpleCParser.ThreadLocal, SimpleCParser.LeftBracket, SimpleCParser.RightBracket, SimpleCParser.LeftBrace, SimpleCParser.RightBrace, SimpleCParser.Less, SimpleCParser.LessEqual, SimpleCParser.Greater, SimpleCParser.GreaterEqual, SimpleCParser.LeftShift, SimpleCParser.RightShift, SimpleCParser.Plus, SimpleCParser.PlusPlus, SimpleCParser.Minus, SimpleCParser.MinusMinus, SimpleCParser.Star, SimpleCParser.Div, SimpleCParser.Mod, SimpleCParser.And, SimpleCParser.Or, SimpleCParser.AndAnd, SimpleCParser.OrOr, SimpleCParser.Caret, SimpleCParser.Not, SimpleCParser.Tilde, SimpleCParser.Question, SimpleCParser.Colon, SimpleCParser.Semi, SimpleCParser.Comma, SimpleCParser.Assign, SimpleCParser.StarAssign, SimpleCParser.DivAssign, SimpleCParser.ModAssign, SimpleCParser.PlusAssign, SimpleCParser.MinusAssign, SimpleCParser.LeftShiftAssign, SimpleCParser.RightShiftAssign, SimpleCParser.AndAssign, SimpleCParser.XorAssign, SimpleCParser.OrAssign, SimpleCParser.Equal, SimpleCParser.NotEqual, SimpleCParser.Arrow, SimpleCParser.Dot, SimpleCParser.Ellipsis, SimpleCParser.Identifier, SimpleCParser.Constant, SimpleCParser.StringLiteral, SimpleCParser.Define, SimpleCParser.Include, SimpleCParser.AsmBlock, SimpleCParser.LineAfterPreprocessing, SimpleCParser.LineDirective, SimpleCParser.PragmaDirective, SimpleCParser.Whitespace, SimpleCParser.Newline, SimpleCParser.BlockComment, SimpleCParser.LineComment]:
                    self.state = 718
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==SimpleCParser.LeftParen or _la==SimpleCParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()

                elif token in [SimpleCParser.LeftParen]:
                    self.state = 719
                    self.match(SimpleCParser.LeftParen)
                    self.state = 720
                    self.nestedParenthesesBlock()
                    self.state = 721
                    self.match(SimpleCParser.RightParen)

                else:
                    raise NoViableAltException(self)

                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifierList(self):
            return self.getTypedRuleContext(SimpleCParser.TypeQualifierListContext,0)


        def pointer(self):
            return self.getTypedRuleContext(SimpleCParser.PointerContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = SimpleCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.match(SimpleCParser.Star)
                self.state = 730
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 729
                    self.typeQualifierList(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.match(SimpleCParser.Star)
                self.state = 734
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                    self.state = 733
                    self.typeQualifierList(0)


                self.state = 736
                self.pointer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 737
                self.match(SimpleCParser.Caret)
                self.state = 739
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 738
                    self.typeQualifierList(0)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 741
                self.match(SimpleCParser.Caret)
                self.state = 743
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                    self.state = 742
                    self.typeQualifierList(0)


                self.state = 745
                self.pointer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self):
            return self.getTypedRuleContext(SimpleCParser.TypeQualifierContext,0)


        def typeQualifierList(self):
            return self.getTypedRuleContext(SimpleCParser.TypeQualifierListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)



    def typeQualifierList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.TypeQualifierListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_typeQualifierList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.typeQualifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 755
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.TypeQualifierListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeQualifierList)
                    self.state = 751
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 752
                    self.typeQualifier() 
                self.state = 757
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SimpleCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = SimpleCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_parameterTypeList)
        try:
            self.state = 763
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.parameterList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                self.parameterList(0)
                self.state = 760
                self.match(SimpleCParser.Comma)
                self.state = 761
                self.match(SimpleCParser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self):
            return self.getTypedRuleContext(SimpleCParser.ParameterDeclarationContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SimpleCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)



    def parameterList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.ParameterListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_parameterList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.parameterDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.ParameterListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterList)
                    self.state = 768
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 769
                    self.match(SimpleCParser.Comma)
                    self.state = 770
                    self.parameterDeclaration() 
                self.state = 775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(SimpleCParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = SimpleCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_parameterDeclaration)
        try:
            self.state = 783
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.declarationSpecifiers()
                self.state = 777
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.declarationSpecifiers2()
                self.state = 781
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SimpleCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)



    def identifierList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.IdentifierListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_identifierList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(SimpleCParser.Identifier)
            self._ctx.stop = self._input.LT(-1)
            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.IdentifierListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_identifierList)
                    self.state = 788
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 789
                    self.match(SimpleCParser.Comma)
                    self.state = 790
                    self.match(SimpleCParser.Identifier) 
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(SimpleCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = SimpleCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.specifierQualifierList()
            self.state = 798
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (SimpleCParser.LeftParen - 51)) | (1 << (SimpleCParser.LeftBracket - 51)) | (1 << (SimpleCParser.Star - 51)) | (1 << (SimpleCParser.Caret - 51)))) != 0):
                self.state = 797
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(SimpleCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return SimpleCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = SimpleCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                _la = self._input.LA(1)
                if _la==SimpleCParser.Star or _la==SimpleCParser.Caret:
                    self.state = 801
                    self.pointer()


                self.state = 804
                self.directAbstractDeclarator(0)
                self.state = 808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 805
                        self.gccDeclaratorExtension() 
                    self.state = 810
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstractDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.AbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.GccDeclaratorExtensionContext,i)


        def typeQualifierList(self):
            return self.getTypedRuleContext(SimpleCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AssignmentExpressionContext,0)


        def parameterTypeList(self):
            return self.getTypedRuleContext(SimpleCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(SimpleCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 814
                self.match(SimpleCParser.LeftParen)
                self.state = 815
                self.abstractDeclarator()
                self.state = 816
                self.match(SimpleCParser.RightParen)
                self.state = 820
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 817
                        self.gccDeclaratorExtension() 
                    self.state = 822
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                pass

            elif la_ == 2:
                self.state = 823
                self.match(SimpleCParser.LeftBracket)
                self.state = 825
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                    self.state = 824
                    self.typeQualifierList(0)


                self.state = 828
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                    self.state = 827
                    self.assignmentExpression()


                self.state = 830
                self.match(SimpleCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 831
                self.match(SimpleCParser.LeftBracket)
                self.state = 832
                self.match(SimpleCParser.Static)
                self.state = 834
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                    self.state = 833
                    self.typeQualifierList(0)


                self.state = 836
                self.assignmentExpression()
                self.state = 837
                self.match(SimpleCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 839
                self.match(SimpleCParser.LeftBracket)
                self.state = 840
                self.typeQualifierList(0)
                self.state = 841
                self.match(SimpleCParser.Static)
                self.state = 842
                self.assignmentExpression()
                self.state = 843
                self.match(SimpleCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 845
                self.match(SimpleCParser.LeftBracket)
                self.state = 846
                self.match(SimpleCParser.Star)
                self.state = 847
                self.match(SimpleCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 848
                self.match(SimpleCParser.LeftParen)
                self.state = 850
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__1) | (1 << SimpleCParser.T__2) | (1 << SimpleCParser.T__3) | (1 << SimpleCParser.T__5) | (1 << SimpleCParser.Auto) | (1 << SimpleCParser.Char) | (1 << SimpleCParser.Const) | (1 << SimpleCParser.Double) | (1 << SimpleCParser.Enum) | (1 << SimpleCParser.Extern) | (1 << SimpleCParser.Float) | (1 << SimpleCParser.Inline) | (1 << SimpleCParser.Int) | (1 << SimpleCParser.Long) | (1 << SimpleCParser.Register) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Short) | (1 << SimpleCParser.Signed) | (1 << SimpleCParser.Static) | (1 << SimpleCParser.Struct) | (1 << SimpleCParser.Typedef) | (1 << SimpleCParser.Union) | (1 << SimpleCParser.Unsigned) | (1 << SimpleCParser.Void) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic) | (1 << SimpleCParser.Noreturn))) != 0) or _la==SimpleCParser.Identifier:
                    self.state = 849
                    self.parameterTypeList()


                self.state = 852
                self.match(SimpleCParser.RightParen)
                self.state = 856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 853
                        self.gccDeclaratorExtension() 
                    self.state = 858
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 904
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 902
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        localctx = SimpleCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 861
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 862
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 864
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                            self.state = 863
                            self.typeQualifierList(0)


                        self.state = 867
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                            self.state = 866
                            self.assignmentExpression()


                        self.state = 869
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = SimpleCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 870
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 871
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 872
                        self.match(SimpleCParser.Static)
                        self.state = 874
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.Const) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic))) != 0):
                            self.state = 873
                            self.typeQualifierList(0)


                        self.state = 876
                        self.assignmentExpression()
                        self.state = 877
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = SimpleCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 879
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 880
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 881
                        self.typeQualifierList(0)
                        self.state = 882
                        self.match(SimpleCParser.Static)
                        self.state = 883
                        self.assignmentExpression()
                        self.state = 884
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = SimpleCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 886
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 887
                        self.match(SimpleCParser.LeftBracket)
                        self.state = 888
                        self.match(SimpleCParser.Star)
                        self.state = 889
                        self.match(SimpleCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = SimpleCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 890
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 891
                        self.match(SimpleCParser.LeftParen)
                        self.state = 893
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__1) | (1 << SimpleCParser.T__2) | (1 << SimpleCParser.T__3) | (1 << SimpleCParser.T__5) | (1 << SimpleCParser.Auto) | (1 << SimpleCParser.Char) | (1 << SimpleCParser.Const) | (1 << SimpleCParser.Double) | (1 << SimpleCParser.Enum) | (1 << SimpleCParser.Extern) | (1 << SimpleCParser.Float) | (1 << SimpleCParser.Inline) | (1 << SimpleCParser.Int) | (1 << SimpleCParser.Long) | (1 << SimpleCParser.Register) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Short) | (1 << SimpleCParser.Signed) | (1 << SimpleCParser.Static) | (1 << SimpleCParser.Struct) | (1 << SimpleCParser.Typedef) | (1 << SimpleCParser.Union) | (1 << SimpleCParser.Unsigned) | (1 << SimpleCParser.Void) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic) | (1 << SimpleCParser.Noreturn))) != 0) or _la==SimpleCParser.Identifier:
                            self.state = 892
                            self.parameterTypeList()


                        self.state = 895
                        self.match(SimpleCParser.RightParen)
                        self.state = 899
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 896
                                self.gccDeclaratorExtension() 
                            self.state = 901
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                        pass

             
                self.state = 906
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypedefNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def getRuleIndex(self):
            return SimpleCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = SimpleCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(SimpleCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(SimpleCParser.AssignmentExpressionContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(SimpleCParser.InitializerListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = SimpleCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_initializer)
        try:
            self.state = 919
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.assignmentExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.match(SimpleCParser.LeftBrace)
                self.state = 911
                self.initializerList(0)
                self.state = 912
                self.match(SimpleCParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 914
                self.match(SimpleCParser.LeftBrace)
                self.state = 915
                self.initializerList(0)
                self.state = 916
                self.match(SimpleCParser.Comma)
                self.state = 917
                self.match(SimpleCParser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self):
            return self.getTypedRuleContext(SimpleCParser.InitializerContext,0)


        def designation(self):
            return self.getTypedRuleContext(SimpleCParser.DesignationContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(SimpleCParser.InitializerListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)



    def initializerList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.InitializerListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_initializerList, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            _la = self._input.LA(1)
            if _la==SimpleCParser.LeftBracket or _la==SimpleCParser.Dot:
                self.state = 922
                self.designation()


            self.state = 925
            self.initializer()
            self._ctx.stop = self._input.LT(-1)
            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.InitializerListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerList)
                    self.state = 927
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 928
                    self.match(SimpleCParser.Comma)
                    self.state = 930
                    _la = self._input.LA(1)
                    if _la==SimpleCParser.LeftBracket or _la==SimpleCParser.Dot:
                        self.state = 929
                        self.designation()


                    self.state = 932
                    self.initializer() 
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DesignationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(SimpleCParser.DesignatorListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = SimpleCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.designatorList(0)
            self.state = 939
            self.match(SimpleCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DesignatorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self):
            return self.getTypedRuleContext(SimpleCParser.DesignatorContext,0)


        def designatorList(self):
            return self.getTypedRuleContext(SimpleCParser.DesignatorListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)



    def designatorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.DesignatorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_designatorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.designator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.DesignatorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_designatorList)
                    self.state = 944
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 945
                    self.designator() 
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ConstantExpressionContext,0)


        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def getRuleIndex(self):
            return SimpleCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = SimpleCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_designator)
        try:
            self.state = 957
            token = self._input.LA(1)
            if token in [SimpleCParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 951
                self.match(SimpleCParser.LeftBracket)
                self.state = 952
                self.constantExpression()
                self.state = 953
                self.match(SimpleCParser.RightBracket)

            elif token in [SimpleCParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.match(SimpleCParser.Dot)
                self.state = 956
                self.match(SimpleCParser.Identifier)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticAssertDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ConstantExpressionContext,0)


        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleCParser.StringLiteral)
            else:
                return self.getToken(SimpleCParser.StringLiteral, i)

        def getRuleIndex(self):
            return SimpleCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = SimpleCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(SimpleCParser.StaticAssert)
            self.state = 960
            self.match(SimpleCParser.LeftParen)
            self.state = 961
            self.constantExpression()
            self.state = 962
            self.match(SimpleCParser.Comma)
            self.state = 964 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 963
                self.match(SimpleCParser.StringLiteral)
                self.state = 966 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SimpleCParser.StringLiteral):
                    break

            self.state = 968
            self.match(SimpleCParser.RightParen)
            self.state = 969
            self.match(SimpleCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(SimpleCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(SimpleCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SimpleCParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(SimpleCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(SimpleCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(SimpleCParser.JumpStatementContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SimpleCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_statement)
        try:
            self.state = 977
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 971
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 972
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 973
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 974
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 975
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 976
                self.jumpStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def statement(self):
            return self.getTypedRuleContext(SimpleCParser.StatementContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(SimpleCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = SimpleCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_labeledStatement)
        try:
            self.state = 990
            token = self._input.LA(1)
            if token in [SimpleCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.match(SimpleCParser.Identifier)
                self.state = 980
                self.match(SimpleCParser.Colon)
                self.state = 981
                self.statement()

            elif token in [SimpleCParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.match(SimpleCParser.Case)
                self.state = 983
                self.constantExpression()
                self.state = 984
                self.match(SimpleCParser.Colon)
                self.state = 985
                self.statement()

            elif token in [SimpleCParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 987
                self.match(SimpleCParser.Default)
                self.state = 988
                self.match(SimpleCParser.Colon)
                self.state = 989
                self.statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItemList(self):
            return self.getTypedRuleContext(SimpleCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = SimpleCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(SimpleCParser.LeftBrace)
            self.state = 994
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.T__1) | (1 << SimpleCParser.T__2) | (1 << SimpleCParser.T__3) | (1 << SimpleCParser.T__5) | (1 << SimpleCParser.Auto) | (1 << SimpleCParser.Break) | (1 << SimpleCParser.Case) | (1 << SimpleCParser.Char) | (1 << SimpleCParser.Const) | (1 << SimpleCParser.Continue) | (1 << SimpleCParser.Default) | (1 << SimpleCParser.Do) | (1 << SimpleCParser.Double) | (1 << SimpleCParser.Enum) | (1 << SimpleCParser.Extern) | (1 << SimpleCParser.Float) | (1 << SimpleCParser.For) | (1 << SimpleCParser.Goto) | (1 << SimpleCParser.If) | (1 << SimpleCParser.Inline) | (1 << SimpleCParser.Int) | (1 << SimpleCParser.Long) | (1 << SimpleCParser.Register) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Return) | (1 << SimpleCParser.Short) | (1 << SimpleCParser.Signed) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Static) | (1 << SimpleCParser.Struct) | (1 << SimpleCParser.Switch) | (1 << SimpleCParser.Typedef) | (1 << SimpleCParser.Union) | (1 << SimpleCParser.Unsigned) | (1 << SimpleCParser.Void) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.While) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.Atomic) | (1 << SimpleCParser.Noreturn) | (1 << SimpleCParser.StaticAssert) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.LeftBrace) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Semi - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                self.state = 993
                self.blockItemList(0)


            self.state = 996
            self.match(SimpleCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self):
            return self.getTypedRuleContext(SimpleCParser.BlockItemContext,0)


        def blockItemList(self):
            return self.getTypedRuleContext(SimpleCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)



    def blockItemList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.BlockItemListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_blockItemList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.blockItem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1005
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.BlockItemListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_blockItemList)
                    self.state = 1001
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1002
                    self.blockItem() 
                self.state = 1007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BlockItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(SimpleCParser.StatementContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = SimpleCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_blockItem)
        try:
            self.state = 1010
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1008
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SimpleCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SimpleCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                self.state = 1012
                self.expression(0)


            self.state = 1015
            self.match(SimpleCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SimpleCParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.StatementContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.StatementContext,i)


        def getRuleIndex(self):
            return SimpleCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = SimpleCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_selectionStatement)
        try:
            self.state = 1032
            token = self._input.LA(1)
            if token in [SimpleCParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.match(SimpleCParser.If)
                self.state = 1018
                self.match(SimpleCParser.LeftParen)
                self.state = 1019
                self.expression(0)
                self.state = 1020
                self.match(SimpleCParser.RightParen)
                self.state = 1021
                self.statement()
                self.state = 1024
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1022
                    self.match(SimpleCParser.Else)
                    self.state = 1023
                    self.statement()



            elif token in [SimpleCParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.match(SimpleCParser.Switch)
                self.state = 1027
                self.match(SimpleCParser.LeftParen)
                self.state = 1028
                self.expression(0)
                self.state = 1029
                self.match(SimpleCParser.RightParen)
                self.state = 1030
                self.statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleCParser.ExpressionContext,i)


        def statement(self):
            return self.getTypedRuleContext(SimpleCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = SimpleCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 1076
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.match(SimpleCParser.While)
                self.state = 1035
                self.match(SimpleCParser.LeftParen)
                self.state = 1036
                self.expression(0)
                self.state = 1037
                self.match(SimpleCParser.RightParen)
                self.state = 1038
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.match(SimpleCParser.Do)
                self.state = 1041
                self.statement()
                self.state = 1042
                self.match(SimpleCParser.While)
                self.state = 1043
                self.match(SimpleCParser.LeftParen)
                self.state = 1044
                self.expression(0)
                self.state = 1045
                self.match(SimpleCParser.RightParen)
                self.state = 1046
                self.match(SimpleCParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1048
                self.match(SimpleCParser.For)
                self.state = 1049
                self.match(SimpleCParser.LeftParen)
                self.state = 1051
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                    self.state = 1050
                    self.expression(0)


                self.state = 1053
                self.match(SimpleCParser.Semi)
                self.state = 1055
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                    self.state = 1054
                    self.expression(0)


                self.state = 1057
                self.match(SimpleCParser.Semi)
                self.state = 1059
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                    self.state = 1058
                    self.expression(0)


                self.state = 1061
                self.match(SimpleCParser.RightParen)
                self.state = 1062
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1063
                self.match(SimpleCParser.For)
                self.state = 1064
                self.match(SimpleCParser.LeftParen)
                self.state = 1065
                self.declaration()
                self.state = 1067
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                    self.state = 1066
                    self.expression(0)


                self.state = 1069
                self.match(SimpleCParser.Semi)
                self.state = 1071
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                    self.state = 1070
                    self.expression(0)


                self.state = 1073
                self.match(SimpleCParser.RightParen)
                self.state = 1074
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SimpleCParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleCParser.ExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(SimpleCParser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = SimpleCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.state = 1094
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.match(SimpleCParser.Goto)
                self.state = 1079
                self.match(SimpleCParser.Identifier)
                self.state = 1080
                self.match(SimpleCParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self.match(SimpleCParser.Continue)
                self.state = 1082
                self.match(SimpleCParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.match(SimpleCParser.Break)
                self.state = 1084
                self.match(SimpleCParser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1085
                self.match(SimpleCParser.Return)
                self.state = 1087
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__0) | (1 << SimpleCParser.Sizeof) | (1 << SimpleCParser.Alignof) | (1 << SimpleCParser.LeftParen) | (1 << SimpleCParser.Plus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SimpleCParser.PlusPlus - 64)) | (1 << (SimpleCParser.Minus - 64)) | (1 << (SimpleCParser.MinusMinus - 64)) | (1 << (SimpleCParser.Star - 64)) | (1 << (SimpleCParser.And - 64)) | (1 << (SimpleCParser.AndAnd - 64)) | (1 << (SimpleCParser.Not - 64)) | (1 << (SimpleCParser.Tilde - 64)) | (1 << (SimpleCParser.Identifier - 64)) | (1 << (SimpleCParser.Constant - 64)) | (1 << (SimpleCParser.StringLiteral - 64)))) != 0):
                    self.state = 1086
                    self.expression(0)


                self.state = 1089
                self.match(SimpleCParser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1090
                self.match(SimpleCParser.Goto)
                self.state = 1091
                self.unaryExpression()
                self.state = 1092
                self.match(SimpleCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SimpleCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(SimpleCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = SimpleCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__1) | (1 << SimpleCParser.T__2) | (1 << SimpleCParser.T__3) | (1 << SimpleCParser.T__5) | (1 << SimpleCParser.Auto) | (1 << SimpleCParser.Char) | (1 << SimpleCParser.Const) | (1 << SimpleCParser.Double) | (1 << SimpleCParser.Enum) | (1 << SimpleCParser.Extern) | (1 << SimpleCParser.Float) | (1 << SimpleCParser.Inline) | (1 << SimpleCParser.Int) | (1 << SimpleCParser.Long) | (1 << SimpleCParser.Register) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Short) | (1 << SimpleCParser.Signed) | (1 << SimpleCParser.Static) | (1 << SimpleCParser.Struct) | (1 << SimpleCParser.Typedef) | (1 << SimpleCParser.Union) | (1 << SimpleCParser.Unsigned) | (1 << SimpleCParser.Void) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic) | (1 << SimpleCParser.Noreturn) | (1 << SimpleCParser.StaticAssert) | (1 << SimpleCParser.LeftParen))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (SimpleCParser.Star - 67)) | (1 << (SimpleCParser.Caret - 67)) | (1 << (SimpleCParser.Semi - 67)) | (1 << (SimpleCParser.Identifier - 67)))) != 0):
                self.state = 1096
                self.translationUnit(0)


            self.state = 1099
            self.match(SimpleCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self):
            return self.getTypedRuleContext(SimpleCParser.ExternalDeclarationContext,0)


        def translationUnit(self):
            return self.getTypedRuleContext(SimpleCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)



    def translationUnit(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.TranslationUnitContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 152
        self.enterRecursionRule(localctx, 152, self.RULE_translationUnit, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.externalDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1108
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.TranslationUnitContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_translationUnit)
                    self.state = 1104
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1105
                    self.externalDeclaration() 
                self.state = 1110
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExternalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(SimpleCParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)




    def externalDeclaration(self):

        localctx = SimpleCParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_externalDeclaration)
        try:
            self.state = 1114
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1113
                self.match(SimpleCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(SimpleCParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(SimpleCParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = SimpleCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1116
                self.declarationSpecifiers()


            self.state = 1119
            self.declarator()
            self.state = 1121
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleCParser.T__1) | (1 << SimpleCParser.T__2) | (1 << SimpleCParser.T__3) | (1 << SimpleCParser.T__5) | (1 << SimpleCParser.Auto) | (1 << SimpleCParser.Char) | (1 << SimpleCParser.Const) | (1 << SimpleCParser.Double) | (1 << SimpleCParser.Enum) | (1 << SimpleCParser.Extern) | (1 << SimpleCParser.Float) | (1 << SimpleCParser.Inline) | (1 << SimpleCParser.Int) | (1 << SimpleCParser.Long) | (1 << SimpleCParser.Register) | (1 << SimpleCParser.Restrict) | (1 << SimpleCParser.Short) | (1 << SimpleCParser.Signed) | (1 << SimpleCParser.Static) | (1 << SimpleCParser.Struct) | (1 << SimpleCParser.Typedef) | (1 << SimpleCParser.Union) | (1 << SimpleCParser.Unsigned) | (1 << SimpleCParser.Void) | (1 << SimpleCParser.Volatile) | (1 << SimpleCParser.Atomic) | (1 << SimpleCParser.Noreturn) | (1 << SimpleCParser.StaticAssert))) != 0) or _la==SimpleCParser.Identifier:
                self.state = 1120
                self.declarationList(0)


            self.state = 1123
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(SimpleCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return SimpleCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)



    def declarationList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleCParser.DeclarationListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_declarationList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1132
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SimpleCParser.DeclarationListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationList)
                    self.state = 1128
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1129
                    self.declaration() 
                self.state = 1134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.postfixExpression_sempred
        self._predicates[2] = self.argumentExpressionList_sempred
        self._predicates[6] = self.multiplicativeExpression_sempred
        self._predicates[7] = self.additiveExpression_sempred
        self._predicates[8] = self.shiftExpression_sempred
        self._predicates[9] = self.relationalExpression_sempred
        self._predicates[10] = self.equalityExpression_sempred
        self._predicates[11] = self.andExpression_sempred
        self._predicates[12] = self.exclusiveOrExpression_sempred
        self._predicates[13] = self.inclusiveOrExpression_sempred
        self._predicates[14] = self.logicalAndExpression_sempred
        self._predicates[15] = self.logicalOrExpression_sempred
        self._predicates[19] = self.expression_sempred
        self._predicates[25] = self.initDeclaratorList_sempred
        self._predicates[31] = self.structDeclarationList_sempred
        self._predicates[34] = self.structDeclaratorList_sempred
        self._predicates[37] = self.enumeratorList_sempred
        self._predicates[44] = self.directDeclarator_sempred
        self._predicates[51] = self.typeQualifierList_sempred
        self._predicates[53] = self.parameterList_sempred
        self._predicates[55] = self.identifierList_sempred
        self._predicates[58] = self.directAbstractDeclarator_sempred
        self._predicates[61] = self.initializerList_sempred
        self._predicates[63] = self.designatorList_sempred
        self._predicates[69] = self.blockItemList_sempred
        self._predicates[76] = self.translationUnit_sempred
        self._predicates[79] = self.declarationList_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

    def argumentExpressionList_sempred(self, localctx:ArgumentExpressionListContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def shiftExpression_sempred(self, localctx:ShiftExpressionContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def relationalExpression_sempred(self, localctx:RelationalExpressionContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def andExpression_sempred(self, localctx:AndExpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def exclusiveOrExpression_sempred(self, localctx:ExclusiveOrExpressionContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def inclusiveOrExpression_sempred(self, localctx:InclusiveOrExpressionContext, predIndex:int):
            if predIndex == 22:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx:LogicalAndExpressionContext, predIndex:int):
            if predIndex == 23:
                return self.precpred(self._ctx, 1)
         

    def logicalOrExpression_sempred(self, localctx:LogicalOrExpressionContext, predIndex:int):
            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 25:
                return self.precpred(self._ctx, 1)
         

    def initDeclaratorList_sempred(self, localctx:InitDeclaratorListContext, predIndex:int):
            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def structDeclarationList_sempred(self, localctx:StructDeclarationListContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def structDeclaratorList_sempred(self, localctx:StructDeclaratorListContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def enumeratorList_sempred(self, localctx:EnumeratorListContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def typeQualifierList_sempred(self, localctx:TypeQualifierListContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def parameterList_sempred(self, localctx:ParameterListContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def identifierList_sempred(self, localctx:IdentifierListContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 1)
         

    def initializerList_sempred(self, localctx:InitializerListContext, predIndex:int):
            if predIndex == 44:
                return self.precpred(self._ctx, 1)
         

    def designatorList_sempred(self, localctx:DesignatorListContext, predIndex:int):
            if predIndex == 45:
                return self.precpred(self._ctx, 1)
         

    def blockItemList_sempred(self, localctx:BlockItemListContext, predIndex:int):
            if predIndex == 46:
                return self.precpred(self._ctx, 1)
         

    def translationUnit_sempred(self, localctx:TranslationUnitContext, predIndex:int):
            if predIndex == 47:
                return self.precpred(self._ctx, 1)
         

    def declarationList_sempred(self, localctx:DeclarationListContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         




